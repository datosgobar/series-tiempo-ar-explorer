{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"applications/","text":"","title":"Applications"},{"location":"docs/","text":"Explorador de Series de Tiempo \ud83d\udd17 El Explorador de Series de Tiempo es una familia de componentes front-end para desarrollar experiencias web a partir de los datos de la API de Series de Tiempo de la Rep\u00fablica Argentina , donde los organismos de la Administraci\u00f3n P\u00fablica Nacional publican indicadores en formatos abiertos. Si quer\u00e9s integrar un explorador completo en tu sitio web (como el de Datos Argentina ) le\u00e9 la referencia de TSExplorer . Si quer\u00e9s agregar gr\u00e1ficos en tu sitio web le\u00e9 la referencia de TSComponents . Versiones de browsers \ud83d\udd17 El Explorador de Series de Tiempo fue desarrolado utilizando versiones recientes de Firefox y Chrome (57+ y 60+), y soporta Internet Explorer desde la versi\u00f3n 11 en adelante. Si sos usuario de la API de Series de Tiempo y quer\u00e9s estar al tanto de los cambios y novedades, inscribite en la base de contactos de Datos Argentina y eleg\u00ed sobre qu\u00e9 temas quer\u00e9s que te escribamos. \u00bfTen\u00e9s algo que contarnos? Nos encantar\u00eda que nos cuentes por Twitter o por mail qu\u00e9 mejor\u00f3 usar la API en tu trabajo y qu\u00e9 le falta para mejorar a\u00fan m\u00e1s.","title":"Inicio"},{"location":"docs/#explorador-de-series-de-tiempo","text":"El Explorador de Series de Tiempo es una familia de componentes front-end para desarrollar experiencias web a partir de los datos de la API de Series de Tiempo de la Rep\u00fablica Argentina , donde los organismos de la Administraci\u00f3n P\u00fablica Nacional publican indicadores en formatos abiertos. Si quer\u00e9s integrar un explorador completo en tu sitio web (como el de Datos Argentina ) le\u00e9 la referencia de TSExplorer . Si quer\u00e9s agregar gr\u00e1ficos en tu sitio web le\u00e9 la referencia de TSComponents .","title":"Explorador de Series de Tiempo"},{"location":"docs/#versiones-de-browsers","text":"El Explorador de Series de Tiempo fue desarrolado utilizando versiones recientes de Firefox y Chrome (57+ y 60+), y soporta Internet Explorer desde la versi\u00f3n 11 en adelante. Si sos usuario de la API de Series de Tiempo y quer\u00e9s estar al tanto de los cambios y novedades, inscribite en la base de contactos de Datos Argentina y eleg\u00ed sobre qu\u00e9 temas quer\u00e9s que te escribamos. \u00bfTen\u00e9s algo que contarnos? Nos encantar\u00eda que nos cuentes por Twitter o por mail qu\u00e9 mejor\u00f3 usar la API en tu trabajo y qu\u00e9 le falta para mejorar a\u00fan m\u00e1s.","title":"Versiones de browsers"},{"location":"terms/","text":"","title":"Terms"},{"location":"developers/deploy/","text":"Documentaci\u00f3n de deploy \ud83d\udd17 Tenemos 2 formas de deploy: Generaci\u00f3n de github pages y generaci\u00f3n de release para subir al CDN . Github pages \ud83d\udd17 El deploy se puede realizar de dos maneras. Ambas son iguales npm run build-docs make build Y finalmente subir todo al branch default: - git add . - git commit -m \"Deploy a github pages\" - git push Release para CDN \ud83d\udd17 Crear un branch desde la versi\u00f3n que queremos salir: - git checkout -b <nombre> Generar los archivos para distribuir. Tenemos dos maneras, ambas son iguales: - npm run release - make release Agregar los archivos: - git add dist (basta con agregar s\u00f3lo la carpeta a distribuir) - git commit -m \"Actualizo carpeta dist\" - git push origin <nombre del branch> Crear un tag: - git tag <nombreDeTag> - git push --tags Con el nombre del tag ya podemos acceder a los archivos que necesitemos: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@nombreDelTag/dist/js/main.js Actualizar series-tiempo-ar-explorer-demo para usar la versi\u00f3n deseada (en el ejemplo la versi\u00f3n es test_0.4 pero podemos usar cualquiera ya sea para el archivo css o para el js): - Modificar el index.html del directorio root del proyecto demo para cambiar la versi\u00f3n usada de JS y de CSS: - CSS: cambiar la l\u00ednea: ` < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@test_0.4/dist/css/main.css\" type = \"text/css\" > ` . JS: cambiar la l\u00ednea: <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@test_0.4/dist/js/main.js\"></script> Las modificaciones de dichas l\u00edneas s\u00f3lo deber\u00edan ser para cambiar la versi\u00f3n, la ruta no deber\u00eda cambiar a menos que se busque usar un archivo distinto.","title":"Despliegue"},{"location":"developers/deploy/#documentacion-de-deploy","text":"Tenemos 2 formas de deploy: Generaci\u00f3n de github pages y generaci\u00f3n de release para subir al CDN .","title":"Documentaci\u00f3n de deploy"},{"location":"developers/deploy/#github-pages","text":"El deploy se puede realizar de dos maneras. Ambas son iguales npm run build-docs make build Y finalmente subir todo al branch default: - git add . - git commit -m \"Deploy a github pages\" - git push","title":"Github pages"},{"location":"developers/deploy/#release-para-cdn","text":"Crear un branch desde la versi\u00f3n que queremos salir: - git checkout -b <nombre> Generar los archivos para distribuir. Tenemos dos maneras, ambas son iguales: - npm run release - make release Agregar los archivos: - git add dist (basta con agregar s\u00f3lo la carpeta a distribuir) - git commit -m \"Actualizo carpeta dist\" - git push origin <nombre del branch> Crear un tag: - git tag <nombreDeTag> - git push --tags Con el nombre del tag ya podemos acceder a los archivos que necesitemos: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@nombreDelTag/dist/js/main.js Actualizar series-tiempo-ar-explorer-demo para usar la versi\u00f3n deseada (en el ejemplo la versi\u00f3n es test_0.4 pero podemos usar cualquiera ya sea para el archivo css o para el js): - Modificar el index.html del directorio root del proyecto demo para cambiar la versi\u00f3n usada de JS y de CSS: - CSS: cambiar la l\u00ednea: ` < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@test_0.4/dist/css/main.css\" type = \"text/css\" > ` . JS: cambiar la l\u00ednea: <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@test_0.4/dist/js/main.js\"></script> Las modificaciones de dichas l\u00edneas s\u00f3lo deber\u00edan ser para cambiar la versi\u00f3n, la ruta no deber\u00eda cambiar a menos que se busque usar un archivo distinto.","title":"Release para CDN"},{"location":"developers/install/","text":"Setup \ud83d\udd17 Requerimientos \ud83d\udd17 Este proyecto requiere Node v8.9.4 o superior (npm v6.0.0). Puede ser instalado con nvm Instalar node y npm. nvm install 8.9.4 O v\u00eda package manager: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs Desarrollo \ud83d\udd17 Instalar hooks git hooks install Instalar dependencias: npm install Iniciar web server make watch para levantar el servidor en localhost:3000 Desarrollo de componentes exportables \ud83d\udd17 Se puede iniciar un servidor web para servir un dashboard que utiliza los componentes exportables usando make components-watch Para mas info: react documentation Problemas comunes \ud83d\udd17 npm start : Error al iniciar el server. Soluci\u00f3n: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p Para correr los tests de un archivo en particular: npm test -- -- <name of describe> why the \"--\" magick incantation Debugging en VS code \ud83d\udd17 Usar esta launch configuration { \"name\": \"Debug Jest Tests\", \"type\": \"node\", \"request\": \"launch\", \"runtimeArgs\": [\"--inspect-brk\", \" ${ workspaceRoot } /scripts/test.js\", \"--runInBand\", \"--env=jsdom\"], \"port\": 9229, \"console\": \"integratedTerminal\", \"internalConsoleOptions\": \"neverOpen\" }","title":"Instalaci\u00f3n"},{"location":"developers/install/#setup","text":"","title":"Setup"},{"location":"developers/install/#requerimientos","text":"Este proyecto requiere Node v8.9.4 o superior (npm v6.0.0). Puede ser instalado con nvm Instalar node y npm. nvm install 8.9.4 O v\u00eda package manager: curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs","title":"Requerimientos"},{"location":"developers/install/#desarrollo","text":"Instalar hooks git hooks install Instalar dependencias: npm install Iniciar web server make watch para levantar el servidor en localhost:3000","title":"Desarrollo"},{"location":"developers/install/#desarrollo-de-componentes-exportables","text":"Se puede iniciar un servidor web para servir un dashboard que utiliza los componentes exportables usando make components-watch Para mas info: react documentation","title":"Desarrollo de componentes exportables"},{"location":"developers/install/#problemas-comunes","text":"npm start : Error al iniciar el server. Soluci\u00f3n: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p Para correr los tests de un archivo en particular: npm test -- -- <name of describe> why the \"--\" magick incantation","title":"Problemas comunes"},{"location":"developers/install/#debugging-en-vs-code","text":"Usar esta launch configuration { \"name\": \"Debug Jest Tests\", \"type\": \"node\", \"request\": \"launch\", \"runtimeArgs\": [\"--inspect-brk\", \" ${ workspaceRoot } /scripts/test.js\", \"--runInBand\", \"--env=jsdom\"], \"port\": 9229, \"console\": \"integratedTerminal\", \"internalConsoleOptions\": \"neverOpen\" }","title":"Debugging en VS code"},{"location":"developers/react_doc/","text":"This project was bootstrapped with Create React App . Below you will find some information on how to perform common tasks. You can find the most recent version of this guide here . Table of Contents \ud83d\udd17 Updating to New Releases Sending Feedback Folder Structure Available Scripts npm start npm test npm run build npm run eject Supported Browsers Supported Language Features and Polyfills Syntax Highlighting in the Editor Displaying Lint Output in the Editor Debugging in the Editor Formatting Code Automatically Changing the Page <title> Installing a Dependency Importing a Component Code Splitting Adding a Stylesheet Post-Processing CSS Adding a CSS Preprocessor (Sass, Less etc.) Adding Images, Fonts, and Files Using the public Folder Changing the HTML Adding Assets Outside of the Module System When to Use the public Folder Using Global Variables Adding Bootstrap Using a Custom Theme Adding Flow Adding a Router Adding Custom Environment Variables Referencing Environment Variables in the HTML Adding Temporary Environment Variables In Your Shell Adding Development Environment Variables In .env Can I Use Decorators? Fetching Data with AJAX Requests Integrating with an API Backend Node Ruby on Rails Proxying API Requests in Development \"Invalid Host Header\" Errors After Configuring Proxy Configuring the Proxy Manually Configuring a WebSocket Proxy Using HTTPS in Development Generating Dynamic <meta> Tags on the Server Pre-Rendering into Static HTML Files Injecting Data from the Server into the Page Running Tests Filename Conventions Command Line Interface Version Control Integration Writing Tests Testing Components Using Third Party Assertion Libraries Initializing Test Environment Focusing and Excluding Tests Coverage Reporting Continuous Integration Disabling jsdom Snapshot Testing Editor Integration Debugging Tests Debugging Tests in Chrome Debugging Tests in Visual Studio Code Developing Components in Isolation Getting Started with Storybook Getting Started with Styleguidist Publishing Components to npm Making a Progressive Web App Opting Out of Caching Offline-First Considerations Progressive Web App Metadata Analyzing the Bundle Size Deployment Static Server Other Solutions Serving Apps with Client-Side Routing Building for Relative Paths Azure Firebase GitHub Pages Heroku Netlify Now S3 and CloudFront Surge Advanced Configuration Troubleshooting npm start doesn\u2019t detect changes npm test hangs on macOS Sierra npm run build exits too early npm run build fails on Heroku npm run build fails to minify Moment.js locales are missing Alternatives to Ejecting Something Missing? Updating to New Releases \ud83d\udd17 Create React App is divided into two packages: create-react-app is a global command-line utility that you use to create new projects. react-scripts is a development dependency in the generated projects (including this one). You almost never need to update create-react-app itself: it delegates all the setup to react-scripts . When you run create-react-app , it always creates the project with the latest version of react-scripts so you\u2019ll get all the new features and improvements in newly created apps automatically. To update an existing project to a new version of react-scripts , open the changelog , find the version you\u2019re currently on (check package.json in this folder if you\u2019re not sure), and apply the migration instructions for the newer versions. In most cases bumping the react-scripts version in package.json and running npm install in this folder should be enough, but it\u2019s good to consult the changelog for potential breaking changes. We commit to keeping the breaking changes minimal so you can upgrade react-scripts painlessly. Sending Feedback \ud83d\udd17 We are always open to your feedback . Folder Structure \ud83d\udd17 After creation, your project should look like this: my - app / README . md node_modules / package . json public / index . html favicon . ico src / App . css App . js App . test . js index . css index . js logo . svg For the project to build, these files must exist with exact filenames : public/index.html is the page template; src/index.js is the JavaScript entry point. You can delete or rename the other files. You may create subdirectories inside src . For faster rebuilds, only files inside src are processed by Webpack. You need to put any JS and CSS files inside src , otherwise Webpack won\u2019t see them. Only files inside public can be used from public/index.html . Read instructions below for using assets from JavaScript and HTML. You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation. Available Scripts \ud83d\udd17 In the project directory, you can run: npm start \ud83d\udd17 Runs the app in the development mode. Open http://localhost:3000 to view it in the browser. The page will reload if you make edits. You will also see any lint errors in the console. npm test \ud83d\udd17 Launches the test runner in the interactive watch mode. See the section about running tests for more information. npm run build \ud83d\udd17 Builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified and the filenames include the hashes. Your app is ready to be deployed! See the section about deployment for more information. npm run eject \ud83d\udd17 Note: this is a one-way operation. Once you eject , you can\u2019t go back! If you aren\u2019t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project. Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own. You don\u2019t have to ever use eject . The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it. Supported Browsers \ud83d\udd17 By default, the generated project uses the latest version of React. You can refer to the React documentation for more information about supported browsers. Supported Language Features and Polyfills \ud83d\udd17 This project supports a superset of the latest JavaScript standard. In addition to ES6 syntax features, it also supports: Exponentiation Operator (ES2016). Async/await (ES2017). Object Rest/Spread Properties (stage 3 proposal). Dynamic import() (stage 3 proposal) Class Fields and Static Properties (stage 2 proposal). JSX and Flow syntax. Learn more about different proposal stages . While we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide codemods if any of these proposals change in the future. Note that the project only includes a few ES6 polyfills : Object.assign() via object-assign . Promise via promise . fetch() via whatwg-fetch . If you use any other ES6+ features that need runtime support (such as Array.from() or Symbol ), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them. Also note that using some newer syntax features like for...of or [...nonArrayValue] causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use Babel REPL to see what any specific syntax compiles down to. Syntax Highlighting in the Editor \ud83d\udd17 To configure the syntax highlighting in your favorite text editor, head to the relevant Babel documentation page and follow the instructions. Some of the most popular editors are covered. Displaying Lint Output in the Editor \ud83d\udd17 Note: this feature is available with react-scripts@0.2.0 and higher. It also only works with npm 3 or higher. Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint. They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do. You would need to install an ESLint plugin for your editor first. Then, add a file called .eslintrc to the project root: { \"extends\" : \"react-app\" } Now your editor should report the linting warnings. Note that even if you edit your .eslintrc file further, these changes will only affect the editor integration . They won\u2019t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes. If you want to enforce a coding style for your project, consider using Prettier instead of ESLint style rules. Debugging in the Editor \ud83d\udd17 This feature is currently only supported by Visual Studio Code and WebStorm . Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don\u2019t have to switch between tools. Visual Studio Code \ud83d\udd17 You would need to have the latest version of VS Code and VS Code Chrome Debugger Extension installed. Then add the block below to your launch.json file and put it inside the .vscode folder in your app\u2019s root directory. { \"version\" : \"0.2.0\" , \"configurations\" : [{ \"name\" : \"Chrome\" , \"type\" : \"chrome\" , \"request\" : \"launch\" , \"url\" : \"http://localhost:3000\" , \"webRoot\" : \"${workspaceRoot}/src\" , \"userDataDir\" : \"${workspaceRoot}/.vscode/chrome\" , \"sourceMapPathOverrides\" : { \"webpack:///src/*\" : \"${webRoot}/*\" } }] } Note: the URL may be different if you've made adjustments via the HOST or PORT environment variables . Start your app by running npm start , and start debugging in VS Code by pressing F5 or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code\u2014all from your editor. WebStorm \ud83d\udd17 You would need to have WebStorm and JetBrains IDE Support Chrome extension installed. In the WebStorm menu Run select Edit Configurations... . Then click + and select JavaScript Debug . Paste http://localhost:3000 into the URL field and save the configuration. Note: the URL may be different if you've made adjustments via the HOST or PORT environment variables . Start your app by running npm start , then press ^D on macOS or F9 on Windows and Linux or click the green debug icon to start debugging in WebStorm. The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. Formatting Code Automatically \ud83d\udd17 Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the Prettier's GitHub page for more information, and look at this page to see it in action . To format our code whenever we make a commit in git, we need to install the following dependencies: npm install --save husky lint-staged prettier Alternatively you may use yarn : yarn add husky lint-staged prettier husky makes it easy to use githooks as if they are npm scripts. lint-staged allows us to run scripts on staged files in git. See this blog post about lint-staged to learn more about it . prettier is the JavaScript formatter we will run before commits. Now we can make sure every file is formatted correctly by adding a few lines to the package.json in the project root. Add the following line to scripts section: \"scripts\": { + \"precommit\": \"lint-staged\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", Next we add a 'lint-staged' field to the package.json , for example: \"dependencies\": { // ... }, + \"lint-staged\": { + \"src/**/*.{js,jsx,json,css}\": [ + \"prettier --single-quote --write\", + \"git add\" + ] + }, \"scripts\": { Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run ./node_modules/.bin/prettier --single-quote --write \"src/**/*.{js,jsx,json,css}\" to format your entire project for the first time. Next you might want to integrate Prettier in your favorite editor. Read the section on Editor Integration on the Prettier GitHub page. Changing the Page <title> \ud83d\udd17 You can find the source HTML file in the public folder of the generated project. You may edit the <title> tag in it to change the title from \u201cReact App\u201d to anything else. Note that normally you wouldn\u2019t edit files in the public folder very often. For example, adding a stylesheet is done without touching the HTML. If you need to dynamically update the page title based on the content, you can use the browser document.title API. For more complex scenarios when you want to change the title from React components, you can use React Helmet , a third party library. If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in this section . Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered here . Installing a Dependency \ud83d\udd17 The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with npm : npm install --save react-router Alternatively you may use yarn : yarn add react-router This works for any library, not just react-router . Importing a Component \ud83d\udd17 This project setup supports ES6 modules thanks to Babel. While you can still use require() and module.exports , we encourage you to use import and export instead. For example: Button.js \ud83d\udd17 import React , { Component } from 'react' ; class Button extends Component { render () { // ... } } export default Button ; // Don\u2019t forget to use export default! DangerButton.js \ud83d\udd17 import React , { Component } from 'react' ; import Button from './Button' ; // Import a component from another file class DangerButton extends Component { render () { return < Button color = \"red\" /> ; } } export default DangerButton ; Be aware of the difference between default and named exports . It is a common source of mistakes. We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That\u2019s what you get when you use export default Button and import Button from './Button' . Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like. Learn more about ES6 modules: When to use the curly braces? Exploring ES6: Modules Understanding ES6: Modules Code Splitting \ud83d\udd17 Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand. This project setup supports code splitting via dynamic import() . Its proposal is in stage 3. The import() function-like form takes the module name as an argument and returns a Promise which always resolves to the namespace object of the module. Here is an example: moduleA.js \ud83d\udd17 const moduleA = 'Hello' ; export { moduleA }; App.js \ud83d\udd17 import React , { Component } from 'react' ; class App extends Component { handleClick = () => { import ( './moduleA' ) . then (({ moduleA }) => { // Use moduleA }) . catch ( err => { // Handle failure }); }; render () { return ( < div > < button onClick = { this . handleClick } > Load < /button> < /div> ); } } export default App ; This will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button. You can also use it with async / await syntax if you prefer it. With React Router \ud83d\udd17 If you are using React Router check out this tutorial on how to use code splitting with it. You can find the companion GitHub repository here . Also check out the Code Splitting section in React documentation. Adding a Stylesheet \ud83d\udd17 This project setup uses Webpack for handling all assets. Webpack offers a custom way of \u201cextending\u201d the concept of import beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to import the CSS from the JavaScript file : Button.css \ud83d\udd17 . Button { padding : 20 px ; } Button.js \ud83d\udd17 import React , { Component } from 'react' ; import './Button.css' ; // Tell Webpack that Button.js uses these styles class Button extends Component { render () { // You can use them as regular CSS styles return < div className = \"Button\" /> ; } } This is not required for React but many people find this feature convenient. You can read about the benefits of this approach here . However you should be aware that this makes your code less portable to other build tools and environments than Webpack. In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified .css file in the build output. If you are concerned about using Webpack-specific semantics, you can put all your CSS right into src/index.css . It would still be imported from src/index.js , but you could always remove that import if you later migrate to a different build tool. Post-Processing CSS \ud83d\udd17 This project setup minifies your CSS and adds vendor prefixes to it automatically through Autoprefixer so you don\u2019t need to worry about it. For example, this: . App { display : flex ; flex-direction : row ; align-items : center ; } becomes this: . App { display : -webkit- box ; display : -ms- flexbox ; display : flex ; -webkit- box-orient : horizontal ; -webkit- box-direction : normal ; -ms- flex-direction : row ; flex-direction : row ; -webkit- box-align : center ; -ms- flex-align : center ; align-items : center ; } If you need to disable autoprefixing for some reason, follow this section . Adding a CSS Preprocessor (Sass, Less etc.) \ud83d\udd17 Generally, we recommend that you don\u2019t reuse the same CSS classes across different components. For example, instead of using a .Button CSS class in <AcceptButton> and <RejectButton> components, we recommend creating a <Button> component with its own .Button styles, that both <AcceptButton> and <RejectButton> can render (but not inherit ). Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative. First, let\u2019s install the command-line interface for Sass: npm install --save node-sass-chokidar Alternatively you may use yarn : yarn add node-sass-chokidar Then in package.json , add the following lines to scripts : \"scripts\": { + \"build-css\": \"node-sass-chokidar src/ -o src/\", + \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", Note: To use a different preprocessor, replace build-css and watch-css commands according to your preprocessor\u2019s documentation. Now you can rename src/App.css to src/App.scss and run npm run watch-css . The watcher will find every Sass file in src subdirectories, and create a corresponding CSS file next to it, in our case overwriting src/App.css . Since src/App.js still imports src/App.css , the styles become a part of your application. You can now edit src/App.scss , and src/App.css will be regenerated. To share variables between Sass files, you can use Sass imports. For example, src/App.scss and other component style files could include @import \"./shared.scss\"; with variable definitions. To enable importing files without using relative paths, you can add the --include-path option to the command in package.json . \" build-css \" : \" node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ \" , \" watch-css \" : \" npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive \" , This will allow you to do imports like @import 'styles/_colors.scss' ; // assuming a styles directory under src/ @import 'nprogress/nprogress' ; // importing a css file from the nprogress node module At this point you might want to remove all CSS files from the source control, and add src/**/*.css to your .gitignore file. It is generally a good practice to keep the build products outside of the source control. As a final step, you may find it convenient to run watch-css automatically with npm start , and run build-css as a part of npm run build . You can use the && operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this: npm install --save npm-run-all Alternatively you may use yarn : yarn add npm-run-all Then we can change start and build scripts to include the CSS preprocessor commands: \"scripts\": { \"build-css\": \"node-sass-chokidar src/ -o src/\", \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\", - \"start\": \"react-scripts-ts start\", - \"build\": \"react-scripts-ts build\", + \"start-js\": \"react-scripts-ts start\", + \"start\": \"npm-run-all -p watch-css start-js\", + \"build\": \"npm run build-css && react-scripts-ts build\", \"test\": \"react-scripts test --env=jsdom\", \"eject\": \"react-scripts eject\" } Now running npm start and npm run build also builds Sass files. Why node-sass-chokidar ? node-sass has been reported as having the following issues: node-sass --watch has been reported to have performance issues in certain conditions when used in a virtual machine or with docker. Infinite styles compiling #1939 node-sass has been reported as having issues with detecting new files in a directory #1891 node-sass-chokidar is used here as it addresses these issues. Adding Images, Fonts, and Files \ud83d\udd17 With Webpack, using static assets like images and fonts works similarly to CSS. You can import a file right in a TypeScript module . This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the src attribute of an image or the href of a link to a PDF. To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a data URI instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to #1153 . Before getting started, you must define each type of asset as a valid module format. Otherwise, the TypeScript compiler will generate an error like this: Cannot find module './logo.png'. To import asset files in TypeScript, create a new type definition file in your project, and name it something like assets.d.ts . Then, add a line for each type of asset that you need to import: declare module \"*.gif\" ; declare module \"*.jpg\" ; declare module \"*.jpeg\" ; declare module \"*.png\" ; declare module \"*.svg\" ; (you'll have to restart the compiler in order the changes to take place) In this case, we've added several image file extensions as valid module formats. Now that the compiler is configured, here is an example of importing an image file: import React from 'react' ; import logo from './logo.svg' ; // Tell Webpack this JS file uses this image console . log ( logo ); // /logo.84287d09.png function Header () { // Import result is the URL of your image return < img src = { logo } alt = \"Logo\" /> ; } export default Header ; This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths. This works in CSS too: . Logo { background-image : url ( ./logo.png ); } Webpack finds all relative module references in CSS (they start with ./ ) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\u2019t need to worry about long-term caching of assets. Please be advised that this is also a custom feature of Webpack. It is not required for React but many people enjoy it (and React Native uses a similar mechanism for images). An alternative way of handling static assets is described in the next section. Using the public Folder \ud83d\udd17 Note: this feature is available with react-scripts@0.5.0 and higher. Changing the HTML \ud83d\udd17 The public folder contains the HTML file so you can tweak it, for example, to set the page title . The <script> tag with the compiled code will be added to it automatically during the build process. Adding Assets Outside of the Module System \ud83d\udd17 You can also add other assets to the public folder. Note that we normally encourage you to import assets in JavaScript files instead. For example, see the sections on adding a stylesheet and adding images and fonts . This mechanism provides a number of benefits: Scripts and stylesheets get minified and bundled together to avoid extra network requests. Missing files cause compilation errors instead of 404 errors for your users. Result filenames include content hashes so you don\u2019t need to worry about browsers caching their old versions. However there is an escape hatch that you can use to add an asset outside of the module system. If you put a file into the public folder, it will not be processed by Webpack. Instead it will be copied into the build folder untouched. To reference assets in the public folder, you need to use a special variable called PUBLIC_URL . Inside index.html , you can use it like this: < link rel = \"shortcut icon\" href = \"%PUBLIC_URL%/favicon.ico\" > Only files inside the public folder will be accessible by %PUBLIC_URL% prefix. If you need to use a file from src or node_modules , you\u2019ll have to copy it there to explicitly specify your intention to make this file a part of the build. When you run npm run build , Create React App will substitute %PUBLIC_URL% with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL. In JavaScript code, you can use process.env.PUBLIC_URL for similar purposes: render () { // Note: this is an escape hatch and should be used sparingly! // Normally we recommend using `import` for getting asset URLs // as described in \u201cAdding Images and Fonts\u201d above this section. return < img src = { process . env . PUBLIC_URL + '/img/logo.png' } /> ; } Keep in mind the downsides of this approach: None of the files in public folder get post-processed or minified. Missing files will not be called at compilation time, and will cause 404 errors for your users. Result filenames won\u2019t include content hashes so you\u2019ll need to add query arguments or rename them every time they change. When to Use the public Folder \ud83d\udd17 Normally we recommend importing stylesheets , images, and fonts from JavaScript. The public folder is useful as a workaround for a number of less common cases: You need a file with a specific name in the build output, such as manifest.webmanifest . You have thousands of images and need to dynamically reference their paths. You want to include a small script like pace.js outside of the bundled code. Some library may be incompatible with Webpack and you have no other option but to include it as a <script> tag. Note that if you add a <script> that declares global variables, you also need to read the next section on using them. Using Global Variables \ud83d\udd17 When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable. You can avoid this by reading the global variable explicitly from the window object, for example: const $ = window . $ ; This makes it obvious you are using a global variable intentionally rather than because of a typo. Alternatively, you can force the linter to ignore any line by adding // eslint-disable-line after it. Adding Bootstrap \ud83d\udd17 You don\u2019t have to use React Bootstrap together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps: Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well: npm install --save react-bootstrap bootstrap@3 Alternatively you may use yarn : yarn add react-bootstrap bootstrap@3 Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your src/index.js file: import 'bootstrap/dist/css/bootstrap.css' ; import 'bootstrap/dist/css/bootstrap-theme.css' ; // Put any other imports below so that CSS from your // components takes precedence over default styles. Import required React Bootstrap components within src/App.js file or your custom component files: import { Navbar , Jumbotron , Button } from 'react-bootstrap' ; Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example App.js redone using React Bootstrap. Using a Custom Theme \ud83d\udd17 Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package). We suggest the following approach: Create a new package that depends on the package you wish to customize, e.g. Bootstrap. Add the necessary build steps to tweak the theme, and publish your package on npm. Install your own theme npm package as a dependency of your app. Here is an example of adding a customized Bootstrap that follows these steps. Adding Flow \ud83d\udd17 Flow is a static type checker that helps you write code with fewer bugs. Check out this introduction to using static types in JavaScript if you are new to this concept. Recent versions of Flow work with Create React App projects out of the box. To add Flow to a Create React App project, follow these steps: Run npm install --save flow-bin (or yarn add flow-bin ). Add \"flow\": \"flow\" to the scripts section of your package.json . Run npm run flow init (or yarn flow init ) to create a .flowconfig file in the root directory. Add // @flow to any files you want to type check (for example, to src/App.js ). Now you can run npm run flow (or yarn flow ) to check the files for type errors. You can optionally use an IDE like Nuclide for a better integrated experience. In the future we plan to integrate it into Create React App even more closely. To learn more about Flow, check out its documentation . Adding a Router \ud83d\udd17 Create React App doesn't prescribe a specific routing solution, but React Router is the most popular one. To add it, run: npm install --save react-router-dom Alternatively you may use yarn : yarn add react-router-dom To try it, delete all the code in src/App.js and replace it with any of the examples on its website. The Basic Example is a good place to get started. Note that you may need to configure your production server to support client-side routing before deploying your app. Adding Custom Environment Variables \ud83d\udd17 Note: this feature is available with react-scripts@0.2.3 and higher. Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have NODE_ENV defined for you, and any other environment variables starting with REACT_APP_ . The environment variables are embedded during the build time . Since Create React App produces a static HTML/CSS/JS bundle, it can\u2019t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like described here . Alternatively you can rebuild the app on the server anytime you change them. Note: You must create custom environment variables beginning with REACT_APP_ . Any other variables except NODE_ENV will be ignored to avoid accidentally exposing a private key on the machine that could have the same name . Changing any environment variables will require you to restart the development server if it is running. These environment variables will be defined for you on process.env . For example, having an environment variable named REACT_APP_SECRET_CODE will be exposed in your JS as process.env.REACT_APP_SECRET_CODE . There is also a special built-in environment variable called NODE_ENV . You can read it from process.env.NODE_ENV . When you run npm start , it is always equal to 'development' , when you run npm test it is always equal to 'test' , and when you run npm run build to make a production bundle, it is always equal to 'production' . You cannot override NODE_ENV manually. This prevents developers from accidentally deploying a slow development build to production. These environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control. First, you need to have environment variables defined. For example, let\u2019s say you wanted to consume a secret defined in the environment inside a <form> : render () { return ( < div > < small > You are running this application in < b > { process . env . NODE_ENV } </ b > mode . </ small > < form > < input type = \" hidden \" defaultValue = { process . env . REACT_APP_SECRET_CODE } /> </ form > </ div > ) ; } During the build, process.env.REACT_APP_SECRET_CODE will be replaced with the current value of the REACT_APP_SECRET_CODE environment variable. Remember that the NODE_ENV variable will be set for you automatically. When you load the app in the browser and inspect the <input> , you will see its value set to abcdef , and the bold text will show the environment provided when using npm start : < div > < small > You are running this application in < b > development </ b > mode. </ small > < form > < input type = \"hidden\" value = \"abcdef\" /> </ form > </ div > The above form is looking for a variable called REACT_APP_SECRET_CODE from the environment. In order to consume this value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in a .env file. Both of these ways are described in the next few sections. Having access to the NODE_ENV is also useful for performing actions conditionally: if ( process . env . NODE_ENV !== 'production' ) { analytics . disable (); } When you compile the app with npm run build , the minification step will strip out this condition, and the resulting bundle will be smaller. Referencing Environment Variables in the HTML \ud83d\udd17 Note: this feature is available with react-scripts@0.9.0 and higher. You can also access the environment variables starting with REACT_APP_ in the public/index.html . For example: < title > %REACT_APP_WEBSITE_NAME% </ title > Note that the caveats from the above section apply: Apart from a few built-in variables ( NODE_ENV and PUBLIC_URL ), variable names must start with REACT_APP_ to work. The environment variables are injected at build time. If you need to inject them at runtime, follow this approach instead . Adding Temporary Environment Variables In Your Shell \ud83d\udd17 Defining environment variables can vary between OSes. It\u2019s also important to know that this manner is temporary for the life of the shell session. Windows (cmd.exe) \ud83d\udd17 set \"REACT_APP_SECRET_CODE=abcdef\" && npm start (Note: Quotes around the variable assignment are required to avoid a trailing whitespace.) Windows (Powershell) \ud83d\udd17 ( $env:REACT_APP_SECRET_CODE = \"abcdef\" ) -and ( npm start ) Linux, macOS (Bash) \ud83d\udd17 REACT_APP_SECRET_CODE = abcdef npm start Adding Development Environment Variables In .env \ud83d\udd17 Note: this feature is available with react-scripts@0.5.0 and higher. To define permanent environment variables, create a file called .env in the root of your project: REACT_APP_SECRET_CODE = abcdef Note: You must create custom environment variables beginning with REACT_APP_ . Any other variables except NODE_ENV will be ignored to avoid accidentally exposing a private key on the machine that could have the same name . Changing any environment variables will require you to restart the development server if it is running. .env files should be checked into source control (with the exclusion of .env*.local ). What other .env files are can be used? \ud83d\udd17 Note: this feature is available with react-scripts@1.0.0 and higher . .env : Default. .env.local : Local overrides. This file is loaded for all environments except test. .env.development , .env.test , .env.production : Environment-specific settings. .env.development.local , .env.test.local , .env.production.local : Local overrides of environment-specific settings. Files on the left have more priority than files on the right: npm start : .env.development.local , .env.development , .env.local , .env npm run build : .env.production.local , .env.production , .env.local , .env npm test : .env.test.local , .env.test , .env (note .env.local is missing) These variables will act as the defaults if the machine does not explicitly set them. Please refer to the dotenv documentation for more details. Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need these defined as well. Consult their documentation how to do this. For example, see the documentation for Travis CI or Heroku . Expanding Environment Variables In .env \ud83d\udd17 Note: this feature is available with react-scripts@1.1.0 and higher. Expand variables already on your machine for use in your .env file (using dotenv-expand ). For example, to get the environment variable npm_package_version : REACT_APP_VERSION= $npm_package_version # also works: # REACT_APP_VERSION= ${ npm_package_version } Or expand variables local to the current .env file: DOMAIN = www . example . com REACT_APP_FOO = $ DOMAIN / foo REACT_APP_BAR = $ DOMAIN / bar Can I Use Decorators? \ud83d\udd17 Many popular libraries use decorators in their documentation. Create React App doesn\u2019t support decorator syntax at the moment because: It is an experimental proposal and is subject to change. The current specification version is not officially supported by Babel. If the specification changes, we won\u2019t be able to write a codemod because we don\u2019t use them internally at Facebook. However in many cases you can rewrite decorator-based code without decorators just as fine. Please refer to these two threads for reference: #214 #411 Create React App will add decorator support when the specification advances to a stable stage. Fetching Data with AJAX Requests \ud83d\udd17 React doesn't prescribe a specific approach to data fetching, but people commonly use either a library like axios or the fetch() API provided by the browser. Conveniently, Create React App includes a polyfill for fetch() so you can use it without worrying about the browser support. The global fetch function allows to easily makes AJAX requests. It takes in a URL as an input and returns a Promise that resolves to a Response object. You can find more information about fetch here . This project also includes a Promise polyfill which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises here and here . Both axios and fetch() use Promises under the hood. You can also use the async / await syntax to reduce the callback nesting. You can learn more about making AJAX requests from React components in the FAQ entry on the React website . Integrating with an API Backend \ud83d\udd17 These tutorials will help you to integrate your app with an API backend running on another port, using fetch() to access it. Node \ud83d\udd17 Check out this tutorial . You can find the companion GitHub repository here . Ruby on Rails \ud83d\udd17 Check out this tutorial . You can find the companion GitHub repository here . Proxying API Requests in Development \ud83d\udd17 Note: this feature is available with react-scripts@0.2.3 and higher. People often serve the front-end React app from the same host and port as their backend implementation. For example, a production setup might look like this after the app is deployed: / - static server returns index . html with React app / todos - static server returns index . html with React app / api / todos - server handles any / api /* requests using the backend implementation Such setup is not required. However, if you do have a setup like this, it is convenient to write requests like fetch('/api/todos') without worrying about redirecting them to another host or port during development. To tell the development server to proxy any unknown requests to your API server in development, add a proxy field to your package.json , for example: \"proxy\" : \"http://localhost:4000\" , This way, when you fetch('/api/todos') in development, the development server will recognize that it\u2019s not a static asset, and will proxy your request to http://localhost:4000/api/todos as a fallback. The development server will only attempt to send requests without a text/html accept header to the proxy. Conveniently, this avoids CORS issues and error messages like this in development: Fetch API cannot load http : // localhost : 4000 / api / todos . No ' Access-Control-Allow-Origin ' header is present on the requested resource . Origin ' http://localhost:3000 ' is therefore not allowed access . If an opaque response serves your needs , set the request ' s mode to ' no - cors ' to fetch the resource with CORS disabled. Keep in mind that proxy only has effect in development (with npm start ), and it is up to you to ensure that URLs like /api/todos point to the right thing in production. You don\u2019t have to use the /api prefix. Any unrecognized request without a text/html accept header will be redirected to the specified proxy . The proxy option supports HTTP, HTTPS and WebSocket connections. If the proxy option is not flexible enough for you, alternatively you can: Configure the proxy yourself Enable CORS on your server ( here\u2019s how to do it for Express ). Use environment variables to inject the right server host and port into your app. \"Invalid Host Header\" Errors After Configuring Proxy \ud83d\udd17 When you enable the proxy option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in this article and this issue . This shouldn\u2019t affect you when developing on localhost , but if you develop remotely like described here , you will see this error in the browser after enabling the proxy option: Invalid Host header To work around it, you can specify your public development host in a file called .env.development in the root of your project: HOST = mypublicdevhost . com If you restart the development server now and load the app from the specified host, it should work. If you are still having issues or if you\u2019re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to .env.development.local . Note that this is dangerous and exposes your machine to remote code execution from malicious websites: # NOTE : THIS IS DANGEROUS ! # It exposes your machine to attacks from the websites you visit . DANGEROUSLY_DISABLE_HOST_CHECK = true We don\u2019t recommend this approach. Configuring the Proxy Manually \ud83d\udd17 Note: this feature is available with react-scripts@1.0.0 and higher. If the proxy option is not flexible enough for you, you can specify an object in the following form (in package.json ). You may also specify any configuration value http-proxy-middleware or http-proxy supports. { // ... \"proxy\" : { \"/api\" : { \"target\" : \"<url>\" , \"ws\" : true // ... } } // ... } All requests matching this path will be proxies, no exceptions. This includes requests for text/html , which the standard proxy option does not proxy. If you need to specify multiple proxies, you may do so by specifying additional entries. You may also narrow down matches using * and/or ** , to match the path exactly or any subpath. { // ... \"proxy\" : { // Matches any request starting with /api \"/api\" : { \"target\" : \"<url_1>\" , \"ws\" : true // ... }, // Matches any request starting with /foo \"/foo\" : { \"target\" : \"<url_2>\" , \"ssl\" : true , \"pathRewrite\" : { \"^/foo\" : \"/foo/beta\" } // ... }, // Matches /bar/abc.html but not /bar/sub/def.html \"/bar/*.html\" : { \"target\" : \"<url_3>\" , // ... }, // Matches /baz/abc.html and /baz/sub/def.html \"/baz/**/*.html\" : { \"target\" : \"<url_4>\" // ... } } // ... } Configuring a WebSocket Proxy \ud83d\udd17 When setting up a WebSocket proxy, there are a some extra considerations to be aware of. If you\u2019re using a WebSocket engine like Socket.io , you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with the websocket.org echo test . There\u2019s some good documentation available for setting up a Socket.io server . Standard WebSockets will work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like ws for the server, with native WebSockets in the browser . Either way, you can proxy WebSocket requests manually in package.json : { // ... \"proxy\" : { \"/socket\" : { // Your compatible WebSocket server \"target\" : \"ws://<socket_url>\" , // Tell http-proxy-middleware that this is a WebSocket proxy. // Also allows you to proxy WebSocket requests without an additional HTTP request // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade \"ws\" : true // ... } } // ... } Using HTTPS in Development \ud83d\udd17 Note: this feature is available with react-scripts@0.4.0 and higher. You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using the \"proxy\" feature to proxy requests to an API server when that API server is itself serving HTTPS. To do this, set the HTTPS environment variable to true , then start the dev server as usual with npm start : Windows (cmd.exe) \ud83d\udd17 set HTTPS = true && npm start Windows (Powershell) \ud83d\udd17 ( $env:HTTPS = $true ) -and ( npm start ) (Note: the lack of whitespace is intentional.) Linux, macOS (Bash) \ud83d\udd17 HTTPS = true npm start Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page. Generating Dynamic <meta> Tags on the Server \ud83d\udd17 Since Create React App doesn\u2019t support server rendering, you might be wondering how to make <meta> tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this: <!doctype html> < html lang = \"en\" > < head > < meta property = \"og:title\" content = \"__OG_TITLE__\" > < meta property = \"og:description\" content = \"__OG_DESCRIPTION__\" > Then, on the server, regardless of the backend you use, you can read index.html into memory and replace __OG_TITLE__ , __OG_DESCRIPTION__ , and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML! If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases. Pre-Rendering into Static HTML Files \ud83d\udd17 If you\u2019re hosting your build with a static hosting provider you can use react-snapshot to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or \u201chydrated\u201d, when the JavaScript bundle has loaded. There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes. The primary benefit of pre-rendering is that you get the core content of each page with the HTML payload\u2014regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines. You can read more about zero-configuration pre-rendering (also called snapshotting) here . Injecting Data from the Server into the Page \ud83d\udd17 Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example: <! doctype html > < html lang = \"en\" > < head > < script > window . SERVER_DATA = __SERVER_DATA__ ; < /script> Then, on the server, you can replace __SERVER_DATA__ with a JSON of real data right before sending the response. The client code can then read window.SERVER_DATA to use it. Make sure to sanitize the JSON before sending it to the client as it makes your app vulnerable to XSS attacks. Running Tests \ud83d\udd17 Note: this feature is available with react-scripts@0.3.0 and higher. Read the migration guide to learn how to enable it in older projects! Create React App uses Jest as its test runner. To prepare for this integration, we did a major revamp of Jest so if you heard bad things about it years ago, give it another try. Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness. While Jest provides browser globals such as window thanks to jsdom , they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks. We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App. Filename Conventions \ud83d\udd17 Jest will look for test files with any of the following popular naming conventions: Files with .js suffix in __tests__ folders. Files with .test.js suffix. Files with .spec.js suffix. The .test.js / .spec.js files (or the __tests__ folders) can be located at any depth under the src top level folder. We recommend to put the test files (or __tests__ folders) next to the code they are testing so that relative imports appear shorter. For example, if App.test.js and App.js are in the same folder, the test just needs to import App from './App' instead of a long relative path. Colocation also helps find tests more quickly in larger projects. Command Line Interface \ud83d\udd17 When you run npm test , Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like npm start recompiles the code. The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the \u201cWatch Usage\u201d note that the watcher prints after every run: Version Control Integration \ud83d\udd17 By default, when you run npm test , Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don\u2019t often commit the code that doesn\u2019t pass the tests. Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press a in the watch mode to force Jest to run all tests. Jest will always run all tests on a continuous integration server or if the project is not inside a Git or Mercurial repository. Writing Tests \ud83d\udd17 To create tests, add it() (or test() ) blocks with the name of the test and its code. You may optionally wrap them in describe() blocks for logical grouping but this is neither required nor recommended. Jest provides a built-in expect() global function for making assertions. A basic test could look like this: import sum from './sum' ; it ( 'sums numbers' , () => { expect ( sum ( 1 , 2 )). toEqual ( 3 ); expect ( sum ( 2 , 2 )). toEqual ( 4 ); }); All expect() matchers supported by Jest are extensively documented here . You can also use jest.fn() and expect(fn).toBeCalled() to create \u201cspies\u201d or mock functions. Testing Components \ud83d\udd17 There is a broad spectrum of component testing techniques. They range from a \u201csmoke test\u201d verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes. Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven\u2019t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components: import * as React from 'react' ; import * as ReactDOM from 'react-dom' ; import App from './App' ; it ( 'renders without crashing' , () => { const div = document . createElement ( 'div' ); ReactDOM . render ( < App /> , div ); }); This test mounts a component and makes sure that it didn\u2019t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in src/App.test.tsx . When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior. If you\u2019d like to test components in isolation from the child components they render, we recommend using shallow() rendering API from Enzyme . To install it, run: npm install --save-dev enzyme @types/enzyme enzyme-adapter-react-16 @types/enzyme-adapter-react-16 react-test-renderer @types/react-test-renderer Alternatively you may use yarn : yarn add --dev enzyme @types/enzyme enzyme-adapter-react-16 @types/enzyme-adapter-react-16 react-test-renderer @types/react-test-renderer src/setupTests.ts \ud83d\udd17 import * as Enzyme from 'enzyme' ; import * as Adapter from 'enzyme-adapter-react-16' ; Enzyme . configure ({ adapter : new Adapter () }); Note: Keep in mind that if you decide to \"eject\" before creating src/setupTests.js , the resulting package.json file won't contain any reference to it. Read here to learn how to add this after ejecting. Now you can write a smoke test with it: import * as React from 'react' ; import { shallow } from 'enzyme' ; import App from './App' ; it ( 'renders without crashing' , () => { shallow ( < App /> ); }); Unlike the previous smoke test using ReactDOM.render() , this test only renders <App> and doesn\u2019t go deeper. For example, even if <App> itself renders a <Button> that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports full rendering with mount() , and you can also use it for testing state changes and component lifecycle. You can read the Enzyme documentation for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don\u2019t have to use them because Jest provides built-in expect() and jest.fn() for spies. Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers: import * as React from 'react' ; import { shallow } from 'enzyme' ; import App from './App' ; it ( 'renders welcome message' , () => { const wrapper = shallow ( < App /> ); const welcome = < h2 > Welcome to React < /h2>; // expect(wrapper.contains(welcome)).to.equal(true); expect ( wrapper . contains ( welcome )). toEqual ( true ); }); All Jest matchers are extensively documented here . Nevertheless you can use a third-party assertion library like Chai if you want to, as described below. Additionally, you might find jest-enzyme helpful to simplify your tests with readable matchers. The above contains code can be written more simply with jest-enzyme. expect ( wrapper ). toContainReact ( welcome ) To enable this, install jest-enzyme : npm install --save jest-enzyme Alternatively you may use yarn : yarn add jest-enzyme Import it in src/setupTests.ts to make its matchers available in every test: import 'jest-enzyme' ; Using Third Party Assertion Libraries \ud83d\udd17 We recommend that you use expect() for assertions and jest.fn() for spies. If you are having issues with them please file those against Jest , and we\u2019ll fix them. We intend to keep making them better for React, supporting, for example, pretty-printing React elements as JSX . However, if you are used to other libraries, such as Chai and Sinon , or if you have existing code using them that you\u2019d like to port over, you can import them normally like this: import sinon from 'sinon' ; import { expect } from 'chai' ; and then use them in your tests like you normally do. Initializing Test Environment \ud83d\udd17 Note: this feature is available with react-scripts@0.4.0 and higher. If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a src/setupTests.ts to your project. It will be automatically executed before running your tests. For example: src/setupTests.ts \ud83d\udd17 const localStorageMock = { getItem : jest.fn (), setItem : jest.fn (), clear : jest.fn () }; global . localStorage = localStorageMock Note: Keep in mind that if you decide to \"eject\" before creating src/setupTests.js , the resulting package.json file won't contain any reference to it, so you should manually create the property setupTestFrameworkScriptFile in the configuration for Jest, something like the following: js \"jest\": { // ... \"setupTestFrameworkScriptFile\": \"<rootDir>/src/setupTests.js\" } Focusing and Excluding Tests \ud83d\udd17 You can replace it() with xit() to temporarily exclude a test from being executed. Similarly, fit() lets you focus on a specific test without running any other tests. Coverage Reporting \ud83d\udd17 Jest has an integrated coverage reporter that works well with ES6 and requires no configuration. Run npm test -- --coverage (note extra -- in the middle) to include a coverage report like this: Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow. Continuous Integration \ud83d\udd17 By default npm test runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called CI . When creating a build of your application with npm run build linter warnings are not checked by default. Like npm test , you can force the build to perform a linter warning check by setting the environment variable CI . If any warnings are encountered then the build fails. Popular CI servers already set the environment variable CI by default but you can do this yourself too: On CI servers \ud83d\udd17 Travis CI \ud83d\udd17 Following the Travis Getting started guide for syncing your GitHub repository with Travis. You may need to initialize some settings manually in your profile page. Add a .travis.yml file to your git repository. language : node_js node_js : - 6 cache : directories : - node_modules script : - npm run build - npm test Trigger your first build with a git push. Customize your Travis CI Build if needed. CircleCI \ud83d\udd17 Follow this article to set up CircleCI with a Create React App project. On your own environment \ud83d\udd17 Windows (cmd.exe) \ud83d\udd17 set CI = true && npm test set CI = true && npm run build (Note: the lack of whitespace is intentional.) Windows (Powershell) \ud83d\udd17 ( $env:CI = $true ) -and ( npm test ) ( $env:CI = $true ) -and ( npm run build ) Linux, macOS (Bash) \ud83d\udd17 CI = true npm test CI = true npm run build The test command will force Jest to run tests once instead of launching the watcher. If you find yourself doing this often in development, please file an issue to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows. The build command will check for linter warnings and fail if any are found. Disabling jsdom \ud83d\udd17 By default, the package.json of the generated project looks like this: \"scripts\" : { \"start\" : \"react-scripts start\" , \"build\" : \"react-scripts build\" , \"test\" : \"react-scripts test --env=jsdom\" If you know that none of your tests depend on jsdom , you can safely remove --env=jsdom , and your tests will run faster: \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", - \"test\": \"react-scripts test --env=jsdom\" + \"test\": \"react-scripts test\" To help you make up your mind, here is a list of APIs that need jsdom : Any browser globals like window and document ReactDOM.render() TestUtils.renderIntoDocument() ( a shortcut for the above) mount() in Enzyme In contrast, jsdom is not needed for the following APIs: TestUtils.createRenderer() (shallow rendering) shallow() in Enzyme Finally, jsdom is also not needed for snapshot testing . Snapshot Testing \ud83d\udd17 Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. Read more about snapshot testing. Editor Integration \ud83d\udd17 If you use Visual Studio Code , there is a Jest extension which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates. Debugging Tests \ud83d\udd17 There are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and Visual Studio Code . Note: debugging tests requires Node 8 or higher. Debugging Tests in Chrome \ud83d\udd17 Add the following to the scripts section in your project's package.json \"scripts\" : { \"test:debug\" : \"react-scripts --inspect-brk test --runInBand --env=jsdom\" } Place debugger; statements in any test and run: $ npm run test:debug This will start running your Jest tests, but pause before executing to allow a debugger to attach to the process. Open the following in Chrome about : inspect After opening that link, the Chrome Developer Tools will be displayed. Select inspect on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a \"play\" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack. Note: the --runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time. Debugging Tests in Visual Studio Code \ud83d\udd17 Debugging Jest tests is supported out of the box for Visual Studio Code . Use the following launch.json configuration file: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug CRA Tests\", \"type\": \"node\", \"request\": \"launch\", \"runtimeExecutable\": \" ${ workspaceRoot } /node_modules/.bin/react-scripts\", \"args\": [ \"test\", \"--runInBand\", \"--no-cache\", \"--env=jsdom\" ], \"cwd\": \" ${ workspaceRoot } \", \"protocol\": \"inspector\", \"console\": \"integratedTerminal\", \"internalConsoleOptions\": \"neverOpen\" } ] } Developing Components in Isolation \ud83d\udd17 Usually, in an app, you have a lot of UI components, and each of them has many different states. For an example, a simple button component could have following states: In a regular state, with a text label. In the disabled mode. In a loading state. Usually, it\u2019s hard to see these states without running a sample app or some examples. Create React App doesn\u2019t include any tools for this by default, but you can easily add Storybook for React ( source ) or React Styleguidist ( source ) to your project. These are third-party tools that let you develop components and see all their states in isolation from your app . You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app. Getting Started with Storybook \ud83d\udd17 Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components. First, install the following npm package globally: npm install -g @storybook/cli Then, run the following command inside your app\u2019s directory: getstorybook After that, follow the instructions on the screen. Learn more about React Storybook: Screencast: Getting Started with React Storybook GitHub Repo Documentation Snapshot Testing UI with Storybook + addon/storyshot Getting Started with Styleguidist \ud83d\udd17 Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground. First, install Styleguidist: npm install --save react-styleguidist Alternatively you may use yarn : yarn add react-styleguidist Then, add these scripts to your package.json : \"scripts\": { + \"styleguide\": \"styleguidist server\", + \"styleguide:build\": \"styleguidist build\", \"start\": \"react-scripts start\", Then, run the following command inside your app\u2019s directory: npm run styleguide After that, follow the instructions on the screen. Learn more about React Styleguidist: GitHub Repo Documentation Publishing Components to npm \ud83d\udd17 Create React App doesn't provide any built-in functionality to publish a component to npm. If you're ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like nwb to prepare it for publishing. Making a Progressive Web App \ud83d\udd17 By default, the production build is a fully functional, offline-first Progressive Web App . Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience: All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background. Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the Subway. On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web push notifications . This eliminates the need for the app store. The sw-precache-webpack-plugin is integrated into production configuration, and it will take care of generating a service worker file that will automatically precache all of your local assets and keep them up to date as you deploy updates. The service worker will use a cache-first strategy for handling all requests for local assets, including the initial HTML, ensuring that your web app is reliably fast, even on a slow or unreliable network. Opting Out of Caching \ud83d\udd17 If you would prefer not to enable service workers prior to your initial production deployment, then remove the call to serviceWorkerRegistration.register() from src/index.js . If you had previously enabled service workers in your production deployment and have decided that you would like to disable them for all your existing users, you can swap out the call to serviceWorkerRegistration.register() in src/index.js with a call to serviceWorkerRegistration.unregister() . After the user visits a page that has serviceWorkerRegistration.unregister() , the service worker will be uninstalled. Note that depending on how /service-worker.js is served, it may take up to 24 hours for the cache to be invalidated. Offline-First Considerations \ud83d\udd17 Service workers require HTTPS , although to facilitate local testing, that policy does not apply to localhost . If your production web server does not support HTTPS, then the service worker registration will fail, but the rest of your web app will remain functional. Service workers are not currently supported in all web browsers. Service worker registration won't be attempted on browsers that lack support. The service worker is only enabled in the production environment , e.g. the output of npm run build . It's recommended that you do not enable an offline-first service worker in a development environment, as it can lead to frustration when previously cached assets are used and do not include the latest changes you've made locally. If you need to test your offline-first service worker locally, build the application (using npm run build ) and run a simple http server from your build directory. After running the build script, create-react-app will give instructions for one way to test your production build locally and the deployment instructions have instructions for using other methods. Be sure to always use an incognito window to avoid complications with your browser cache. If possible, configure your production environment to serve the generated service-worker.js with HTTP caching disabled . If that's not possible\u2014 GitHub Pages , for instance, does not allow you to change the default 10 minute HTTP cache lifetime\u2014then be aware that if you visit your production site, and then revisit again before service-worker.js has expired from your HTTP cache, you'll continue to get the previously cached assets from the service worker. If you have an immediate need to view your updated production deployment, performing a shift-refresh will temporarily disable the service worker and retrieve all assets from the network. Users aren't always familiar with offline-first web apps. It can be useful to let the user know when the service worker has finished populating your caches (showing a \"This web app works offline!\" message) and also let them know when the service worker has fetched the latest updates that will be available the next time they load the page (showing a \"New content is available; please refresh.\" message). Showing this messages is currently left as an exercise to the developer, but as a starting point, you can make use of the logic included in src/registerServiceWorker.js , which demonstrates which service worker lifecycle events to listen for to detect each scenario, and which as a default, just logs appropriate messages to the JavaScript console. By default, the generated service worker file will not intercept or cache any cross-origin traffic, like HTTP API requests , images, or embeds loaded from a different domain. If you would like to use a runtime caching strategy for those requests, you can eject and then configure the runtimeCaching option in the SWPrecacheWebpackPlugin section of webpack.config.prod.js . Progressive Web App Metadata \ud83d\udd17 The default configuration includes a web app manifest located at public/manifest.json , that you can customize with details specific to your web application. When a user adds a web app to their homescreen using Chrome or Firefox on Android, the metadata in manifest.json determines what icons, names, and branding colors to use when the web app is displayed. The Web App Manifest guide provides more context about what each field means, and how your customizations will affect your users' experience. Analyzing the Bundle Size \ud83d\udd17 Source map explorer analyzes JavaScript bundles using the source maps. This helps you understand where code bloat is coming from. To add Source map explorer to a Create React App project, follow these steps: npm install --save source-map-explorer Alternatively you may use yarn : yarn add source-map-explorer Then in package.json , add the following line to scripts : \"scripts\": { + \"analyze\": \"source-map-explorer build/static/js/main.*\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", Then to analyze the bundle run the production build then run the analyze script. npm run build npm run analyze Deployment \ud83d\udd17 npm run build creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html , and requests to static paths like /static/js/main.<hash>.js are served with the contents of the /static/js/main.<hash>.js file. Static Server \ud83d\udd17 For environments using Node , the easiest way to handle this would be to install serve and let it handle the rest: npm install -g serve serve -s build The last command shown above will serve your static site on the port 5000 . Like many of serve \u2019s internal settings, the port can be adjusted using the -p or --port flags. Run this command to get a full list of the options available: serve -h Other Solutions \ud83d\udd17 You don\u2019t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one. Here\u2019s a programmatic example using Node and Express : const express = require ( 'express' ); const path = require ( 'path' ); const app = express (); app . use ( express . static ( path . join ( __dirname , 'build' ))); app . get ( '/' , function ( req , res ) { res . sendFile ( path . join ( __dirname , 'build' , 'index.html' )); }); app . listen ( 9000 ); The choice of your server software isn\u2019t important either. Since Create React App is completely platform-agnostic, there\u2019s no need to explicitly use Node. The build folder with static assets is the only output produced by Create React App. However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like /todos/42 in your single-page app. Serving Apps with Client-Side Routing \ud83d\udd17 If you use routers that use the HTML5 pushState history API under the hood (for example, React Router with browserHistory ), many static file servers will fail. For example, if you used React Router with a route for /todos/42 , the development server will respond to localhost:3000/todos/42 properly, but an Express serving a production build as above will not. This is because when there is a fresh page load for a /todos/42 , the server looks for the file build/todos/42 and does not find it. The server needs to be configured to respond to a request to /todos/42 by serving index.html . For example, we can amend our Express example above to serve index.html for any unknown paths: app.use(express.static(path.join(__dirname, 'build'))); -app.get('/', function (req, res) { +app.get('/*', function (req, res) { res.sendFile(path.join(__dirname, 'build', 'index.html')); }); If you\u2019re using Apache HTTP Server , you need to create a .htaccess file in the public folder that looks like this: Options - MultiViews RewriteEngine On RewriteCond % { REQUEST_FILENAME } !- f RewriteRule ^ index . html [ QSA , L ] It will get copied to the build folder when you run npm run build . If you\u2019re using Apache Tomcat , you need to follow this Stack Overflow answer . Now requests to /todos/42 will be handled correctly both in development and in production. On a production build, and in a browser that supports service workers , the service worker will automatically handle all navigation requests, like for /todos/42 , by serving the cached copy of your index.html . This service worker navigation routing can be configured or disabled by eject ing and then modifying the navigateFallback and navigateFallbackWhitelist options of the SWPreachePlugin configuration . Building for Relative Paths \ud83d\udd17 By default, Create React App produces a build assuming your app is hosted at the server root. To override this, specify the homepage in your package.json , for example: \"homepage\" : \"http://mywebsite.com/relativepath\" , This will let Create React App correctly infer the root path to use in the generated HTML file. Note : If you are using react-router@^4 , you can root <Link> s using the basename prop on any <Router> . More information here . For example: < BrowserRouter basename = \"/calendar\" /> < Link to = \"/today\" /> // renders <a href=\"/calendar/today\"> Serving the Same Build from Different Paths \ud83d\udd17 Note: this feature is available with react-scripts@0.9.0 and higher. If you are not using the HTML5 pushState history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your package.json : \"homepage\" : \".\" , This will make sure that all the asset paths are relative to index.html . You will then be able to move your app from http://mywebsite.com to http://mywebsite.com/relativepath or even http://mywebsite.com/relative/path without having to rebuild it. Azure \ud83d\udd17 See this blog post on how to deploy your React app to Microsoft Azure . Firebase \ud83d\udd17 See this blog post or this repo for a way to use automatic deployment to Azure App Service. Install the Firebase CLI if you haven\u2019t already by running npm install -g firebase-tools . Sign up for a Firebase account and create a new project. Run firebase login and login with your previous created Firebase account. Then run the firebase init command from your project\u2019s root. You need to choose the Hosting: Configure and deploy Firebase Hosting sites and choose the Firebase project you created in the previous step. You will need to agree with database.rules.json being created, choose build as the public directory, and also agree to Configure as a single-page app by replying with y . === Project Setup First, let 's associate this project directory with a Firebase project. You can create multiple project aliases by running firebase use --add, but for now we' ll just set up a default project. ? What Firebase project do you want to associate as default? Example app ( example-app-fd690 ) === Database Setup Firebase Realtime Database Rules allow you to define how your data should be structured and when your data can be read from and written to. ? What file should be used for Database Rules? database.rules.json \u2714 Database Rules for example-app-fd690 have been downloaded to database.rules.json. Future modifications to database.rules.json will update Database Rules when you run firebase deploy. === Hosting Setup Your public directory is the folder ( relative to your project directory ) that will contain Hosting assets to uploaded with firebase deploy. If you have a build process for your assets, use your build ' s output directory. ? What do you want to use as your public directory? build ? Configure as a single-page app ( rewrite all urls to /index.html ) ? Yes \u2714 Wrote build/index.html i Writing configuration info to firebase.json... i Writing project information to .firebaserc... \u2714 Firebase initialization complete! IMPORTANT: you need to set proper HTTP caching headers for service-worker.js file in firebase.json file or you will not be able to see changes after first deployment ( issue #2440 ). It should be added inside \"hosting\" key like next: { \"hosting\" : { ... \"headers\" : [ { \"source\" : \"/service-worker.js\" , \"headers\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache\" } ] } ] ... Now, after you create a production build with npm run build , you can deploy it by running firebase deploy . === Deploying to 'example-app-fd690' ... i deploying database, hosting \u2714 database: rules ready to deploy. i hosting: preparing build directory for upload... Uploading: [============================== ] 75 %\u2714 hosting: build folder uploaded successfully \u2714 hosting: 8 files uploaded successfully i starting release process ( may take several minutes ) ... \u2714 Deploy complete! Project Console: https://console.firebase.google.com/project/example-app-fd690/overview Hosting URL: https://example-app-fd690.firebaseapp.com For more information see Add Firebase to your JavaScript Project . GitHub Pages \ud83d\udd17 Note: this feature is available with react-scripts@0.2.0 and higher. Step 1: Add homepage to package.json \ud83d\udd17 The step below is important! If you skip it, your app will not deploy correctly. Open your package.json and add a homepage field for your project: \"homepage\" : \"https://myusername.github.io/my-app\" , or for a GitHub user page: \"homepage\" : \"https://myusername.github.io\" , Create React App uses the homepage field to determine the root URL in the built HTML file. Step 2: Install gh-pages and add deploy to scripts in package.json \ud83d\udd17 Now, whenever you run npm run build , you will see a cheat sheet with instructions on how to deploy to GitHub Pages. To publish it at https://myusername.github.io/my-app , run: npm install --save gh-pages Alternatively you may use yarn : yarn add gh-pages Add the following scripts in your package.json : \"scripts\": { + \"predeploy\": \"npm run build\", + \"deploy\": \"gh-pages -d build\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", The predeploy script will run automatically before deploy is run. If you are deploying to a GitHub user page instead of a project page you'll need to make two additional modifications: First, change your repository's source branch to be any branch other than master . Additionally, tweak your package.json scripts to push deployments to master : \"scripts\": { \"predeploy\": \"npm run build\", - \"deploy\": \"gh-pages -d build\", + \"deploy\": \"gh-pages -b master -d build\", Step 3: Deploy the site by running npm run deploy \ud83d\udd17 Then run: npm run deploy Step 4: Ensure your project\u2019s settings use gh-pages \ud83d\udd17 Finally, make sure GitHub Pages option in your GitHub project settings is set to use the gh-pages branch: Step 5: Optionally, configure the domain \ud83d\udd17 You can configure a custom domain with GitHub Pages by adding a CNAME file to the public/ folder. Notes on client-side routing \ud83d\udd17 GitHub Pages doesn\u2019t support routers that use the HTML5 pushState history API under the hood (for example, React Router using browserHistory ). This is because when there is a fresh page load for a url like http://user.github.io/todomvc/todos/42 , where /todos/42 is a frontend route, the GitHub Pages server returns 404 because it knows nothing of /todos/42 . If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions: You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to hashHistory for this effect, but the URL will be longer and more verbose (for example, http://user.github.io/todomvc/#/todos/42?_k=yknaj ). Read more about different history implementations in React Router. Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your index.html page with a special redirect parameter. You would need to add a 404.html file with the redirection code to the build folder before deploying your project, and you\u2019ll need to add code handling the redirect parameter to index.html . You can find a detailed explanation of this technique in this guide . <<<<<<< HEAD Heroku \ud83d\udd17 ======= Troubleshooting \ud83d\udd17 \"/dev/tty: No such a device or address\" \ud83d\udd17 If, when deploying, you get /dev/tty: No such a device or address or a similar error, try the follwing: Create a new Personal Access Token git remote set-url origin https://<user>:<token>@github.com/<user>/<repo> . Try npm run deploy again Heroku \ud83d\udd17 dfbc71ce2ae07547a8544cce14a1a23fac99e071 Use the Heroku Buildpack for Create React App . You can find instructions in Deploying React with Zero Configuration . Resolving Heroku Deployment Errors \ud83d\udd17 Sometimes npm run build works locally but fails during deploy via Heroku. Following are the most common cases. \"Module not found: Error: Cannot resolve 'file' or 'directory'\" \ud83d\udd17 If you get something like this: remote : Failed to create a production build . Reason : remote : Module not found : Error : Cannot resolve 'file' or 'directory' MyDirectory in /tmp/build_1234/s rc It means you need to ensure that the lettercase of the file or directory you import matches the one you see on your filesystem or on GitHub. This is important because Linux (the operating system used by Heroku) is case sensitive. So MyDirectory and mydirectory are two distinct directories and thus, even though the project builds locally, the difference in case breaks the import statements on Heroku remotes. \"Could not find a required file.\" \ud83d\udd17 If you exclude or ignore necessary files from the package you will see a error similar this one: remote : Could not find a required file . remote : Name : ` index . html ` remote : Searched in : /tmp/build_a2875fc163b209225122d68916f1d4df/ public remote : remote : npm ERR ! Linux 3.13 . 0 - 105 - generic remote : npm ERR ! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\" In this case, ensure that the file is there with the proper lettercase and that\u2019s not ignored on your local .gitignore or ~/.gitignore_global . Netlify \ud83d\udd17 To do a manual deploy to Netlify\u2019s CDN: npm install netlify-cli -g netlify deploy Choose build as the path to deploy. To setup continuous delivery: With this setup Netlify will build and deploy when you push to git or open a pull request: Start a new netlify project Pick your Git hosting service and select your repository Set yarn build as the build command and build as the publish directory Click Deploy site Support for client-side routing: To support pushState , make sure to create a public/_redirects file with the following rewrite rules: /* /index.html 200 When you build the project, Create React App will place the public folder contents into the build output. Now \ud83d\udd17 now offers a zero-configuration single-command deployment. You can use now to deploy your app for free. Install the now command-line tool either via the recommended desktop tool or via node with npm install -g now . Build your app by running npm run build . Move into the build directory by running cd build . Run now --name your-project-name from within the build directory. You will see a now.sh URL in your output like this: ``` Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard) ``` Paste that URL into your browser when the build is complete, and you will see your deployed app. Details are available in this article. S3 and CloudFront \ud83d\udd17 See this blog post on how to deploy your React app to Amazon Web Services S3 and CloudFront . Surge \ud83d\udd17 Install the Surge CLI if you haven\u2019t already by running npm install -g surge . Run the surge command and log in you or create a new account. When asked about the project path, make sure to specify the build folder, for example: project path: /path/to/project/build Note that in order to support routers that use HTML5 pushState API, you may want to rename the index.html in your build folder to 200.html before deploying to Surge. This ensures that every URL falls back to that file . Advanced Configuration \ud83d\udd17 You can adjust various development and production settings by setting environment variables in your shell or with .env . Variable Development Production Usage BROWSER :white_check_mark: :x: By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a browser to override this behavior, or set it to none to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to npm start will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the .js extension. HOST :white_check_mark: :x: By default, the development web server binds to localhost . You may use this variable to specify a different host. PORT :white_check_mark: :x: By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port. HTTPS :white_check_mark: :x: When set to true , Create React App will run the development server in https mode. PUBLIC_URL :x: :white_check_mark: Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in package.json ( homepage ) . Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application. CI :large_orange_diamond: :white_check_mark: When set to true , Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default. REACT_EDITOR :white_check_mark: :x: When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can send a pull request to detect your editor of choice . Setting this environment variable overrides the automatic detection. If you do it, make sure your systems PATH environment variable points to your editor\u2019s bin folder. You can also set it to none to disable it completely. CHOKIDAR_USEPOLLING :white_check_mark: :x: When set to true , the watcher runs in polling mode, as necessary inside a VM. Use this option if npm start isn't detecting changes. GENERATE_SOURCEMAP :x: :white_check_mark: When set to false , source maps are not generated for a production build. This solves OOM issues on some smaller machines. NODE_PATH :white_check_mark: :white_check_mark: Same as NODE_PATH in Node.js , but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting NODE_PATH=src . Troubleshooting \ud83d\udd17 npm start doesn\u2019t detect changes \ud83d\udd17 When you save a file while npm start is running, the browser should refresh with the updated code. If this doesn\u2019t happen, try one of the following workarounds: If your project is in a Dropbox folder, try moving it out. If the watcher doesn\u2019t see a file called index.js and you\u2019re referencing it by the folder name, you need to restart the watcher due to a Webpack bug. Some editors like Vim and IntelliJ have a \u201csafe write\u201d feature that currently breaks the watcher. You will need to disable it. Follow the instructions in \u201cAdjusting Your Text Editor\u201d . If your project path contains parentheses, try moving the project to a path without them. This is caused by a Webpack watcher bug . On Linux and macOS, you might need to tweak system settings to allow more watchers. If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an .env file in your project directory if it doesn\u2019t exist, and add CHOKIDAR_USEPOLLING=true to it. This ensures that the next time you run npm start , the watcher uses the polling mode, as necessary inside a VM. If none of these solutions help please leave a comment in this thread . npm test hangs on macOS Sierra \ud83d\udd17 If you run npm test and the console gets stuck after printing react-scripts test --env=jsdom to the console there might be a problem with your Watchman installation as described in facebookincubator/create-react-app#713 . We recommend deleting node_modules in your project and running npm install (or yarn if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues: facebook/jest#1767 facebook/watchman#358 ember-cli/ember-cli#6259 It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use Homebrew , you can run these commands to update it: watchman shutdown - server brew update brew reinstall watchman You can find other installation methods on the Watchman documentation page. If this still doesn\u2019t help, try running launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist . There are also reports that uninstalling Watchman fixes the issue. So if nothing else helps, remove it from your system and try again. npm run build exits too early \ud83d\udd17 It is reported that npm run build can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message: The build failed because the process exited too early. This probably means the system ran out of memory or someone called kill -9 on the process. If you are completely sure that you didn't terminate the process, consider adding some swap space to the machine you\u2019re building on, or build the project locally. npm run build fails on Heroku \ud83d\udd17 This may be a problem with case sensitive filenames. Please refer to this section . Moment.js locales are missing \ud83d\udd17 If you use a Moment.js , you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of all the locales provided by Moment.js . To add a specific Moment.js locale to your bundle, you need to import it explicitly. For example: import moment from 'moment' ; import 'moment/locale/fr' ; If import multiple locales this way, you can later switch between them by calling moment.locale() with the locale name: import moment from 'moment' ; import 'moment/locale/fr' ; import 'moment/locale/es' ; // ... moment . locale ( 'fr' ); This will only work for locales that have been explicitly imported before. npm run build fails to minify \ud83d\udd17 You may occasionally find a package you depend on needs compiled or ships code for a non-browser environment. This is considered poor practice in the ecosystem and does not have an escape hatch in Create React App. To resolve this: 1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled (retaining ES6 Modules). 2. Fork the package and publish a corrected version yourself. 3. If the dependency is small enough, copy it to your src/ folder and treat it as application code. In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds. Alternatives to Ejecting \ud83d\udd17 Ejecting lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to fork react-scripts and any other packages you need. This article dives into how to do it in depth. You can find more discussion in this issue . Something Missing? \ud83d\udd17 If you have ideas for more \u201cHow To\u201d recipes that should be on this page, let us know or contribute some!","title":"React"},{"location":"developers/react_doc/#table-of-contents","text":"Updating to New Releases Sending Feedback Folder Structure Available Scripts npm start npm test npm run build npm run eject Supported Browsers Supported Language Features and Polyfills Syntax Highlighting in the Editor Displaying Lint Output in the Editor Debugging in the Editor Formatting Code Automatically Changing the Page <title> Installing a Dependency Importing a Component Code Splitting Adding a Stylesheet Post-Processing CSS Adding a CSS Preprocessor (Sass, Less etc.) Adding Images, Fonts, and Files Using the public Folder Changing the HTML Adding Assets Outside of the Module System When to Use the public Folder Using Global Variables Adding Bootstrap Using a Custom Theme Adding Flow Adding a Router Adding Custom Environment Variables Referencing Environment Variables in the HTML Adding Temporary Environment Variables In Your Shell Adding Development Environment Variables In .env Can I Use Decorators? Fetching Data with AJAX Requests Integrating with an API Backend Node Ruby on Rails Proxying API Requests in Development \"Invalid Host Header\" Errors After Configuring Proxy Configuring the Proxy Manually Configuring a WebSocket Proxy Using HTTPS in Development Generating Dynamic <meta> Tags on the Server Pre-Rendering into Static HTML Files Injecting Data from the Server into the Page Running Tests Filename Conventions Command Line Interface Version Control Integration Writing Tests Testing Components Using Third Party Assertion Libraries Initializing Test Environment Focusing and Excluding Tests Coverage Reporting Continuous Integration Disabling jsdom Snapshot Testing Editor Integration Debugging Tests Debugging Tests in Chrome Debugging Tests in Visual Studio Code Developing Components in Isolation Getting Started with Storybook Getting Started with Styleguidist Publishing Components to npm Making a Progressive Web App Opting Out of Caching Offline-First Considerations Progressive Web App Metadata Analyzing the Bundle Size Deployment Static Server Other Solutions Serving Apps with Client-Side Routing Building for Relative Paths Azure Firebase GitHub Pages Heroku Netlify Now S3 and CloudFront Surge Advanced Configuration Troubleshooting npm start doesn\u2019t detect changes npm test hangs on macOS Sierra npm run build exits too early npm run build fails on Heroku npm run build fails to minify Moment.js locales are missing Alternatives to Ejecting Something Missing?","title":"Table of Contents"},{"location":"developers/react_doc/#updating-to-new-releases","text":"Create React App is divided into two packages: create-react-app is a global command-line utility that you use to create new projects. react-scripts is a development dependency in the generated projects (including this one). You almost never need to update create-react-app itself: it delegates all the setup to react-scripts . When you run create-react-app , it always creates the project with the latest version of react-scripts so you\u2019ll get all the new features and improvements in newly created apps automatically. To update an existing project to a new version of react-scripts , open the changelog , find the version you\u2019re currently on (check package.json in this folder if you\u2019re not sure), and apply the migration instructions for the newer versions. In most cases bumping the react-scripts version in package.json and running npm install in this folder should be enough, but it\u2019s good to consult the changelog for potential breaking changes. We commit to keeping the breaking changes minimal so you can upgrade react-scripts painlessly.","title":"Updating to New Releases"},{"location":"developers/react_doc/#sending-feedback","text":"We are always open to your feedback .","title":"Sending Feedback"},{"location":"developers/react_doc/#folder-structure","text":"After creation, your project should look like this: my - app / README . md node_modules / package . json public / index . html favicon . ico src / App . css App . js App . test . js index . css index . js logo . svg For the project to build, these files must exist with exact filenames : public/index.html is the page template; src/index.js is the JavaScript entry point. You can delete or rename the other files. You may create subdirectories inside src . For faster rebuilds, only files inside src are processed by Webpack. You need to put any JS and CSS files inside src , otherwise Webpack won\u2019t see them. Only files inside public can be used from public/index.html . Read instructions below for using assets from JavaScript and HTML. You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation.","title":"Folder Structure"},{"location":"developers/react_doc/#available-scripts","text":"In the project directory, you can run:","title":"Available Scripts"},{"location":"developers/react_doc/#npm-start","text":"Runs the app in the development mode. Open http://localhost:3000 to view it in the browser. The page will reload if you make edits. You will also see any lint errors in the console.","title":"npm start"},{"location":"developers/react_doc/#npm-test","text":"Launches the test runner in the interactive watch mode. See the section about running tests for more information.","title":"npm test"},{"location":"developers/react_doc/#npm-run-build","text":"Builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified and the filenames include the hashes. Your app is ready to be deployed! See the section about deployment for more information.","title":"npm run build"},{"location":"developers/react_doc/#npm-run-eject","text":"Note: this is a one-way operation. Once you eject , you can\u2019t go back! If you aren\u2019t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project. Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you\u2019re on your own. You don\u2019t have to ever use eject . The curated feature set is suitable for small and middle deployments, and you shouldn\u2019t feel obligated to use this feature. However we understand that this tool wouldn\u2019t be useful if you couldn\u2019t customize it when you are ready for it.","title":"npm run eject"},{"location":"developers/react_doc/#supported-browsers","text":"By default, the generated project uses the latest version of React. You can refer to the React documentation for more information about supported browsers.","title":"Supported Browsers"},{"location":"developers/react_doc/#supported-language-features-and-polyfills","text":"This project supports a superset of the latest JavaScript standard. In addition to ES6 syntax features, it also supports: Exponentiation Operator (ES2016). Async/await (ES2017). Object Rest/Spread Properties (stage 3 proposal). Dynamic import() (stage 3 proposal) Class Fields and Static Properties (stage 2 proposal). JSX and Flow syntax. Learn more about different proposal stages . While we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide codemods if any of these proposals change in the future. Note that the project only includes a few ES6 polyfills : Object.assign() via object-assign . Promise via promise . fetch() via whatwg-fetch . If you use any other ES6+ features that need runtime support (such as Array.from() or Symbol ), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them. Also note that using some newer syntax features like for...of or [...nonArrayValue] causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use Babel REPL to see what any specific syntax compiles down to.","title":"Supported Language Features and Polyfills"},{"location":"developers/react_doc/#syntax-highlighting-in-the-editor","text":"To configure the syntax highlighting in your favorite text editor, head to the relevant Babel documentation page and follow the instructions. Some of the most popular editors are covered.","title":"Syntax Highlighting in the Editor"},{"location":"developers/react_doc/#displaying-lint-output-in-the-editor","text":"Note: this feature is available with react-scripts@0.2.0 and higher. It also only works with npm 3 or higher. Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint. They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do. You would need to install an ESLint plugin for your editor first. Then, add a file called .eslintrc to the project root: { \"extends\" : \"react-app\" } Now your editor should report the linting warnings. Note that even if you edit your .eslintrc file further, these changes will only affect the editor integration . They won\u2019t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes. If you want to enforce a coding style for your project, consider using Prettier instead of ESLint style rules.","title":"Displaying Lint Output in the Editor"},{"location":"developers/react_doc/#debugging-in-the-editor","text":"This feature is currently only supported by Visual Studio Code and WebStorm . Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don\u2019t have to switch between tools.","title":"Debugging in the Editor"},{"location":"developers/react_doc/#visual-studio-code","text":"You would need to have the latest version of VS Code and VS Code Chrome Debugger Extension installed. Then add the block below to your launch.json file and put it inside the .vscode folder in your app\u2019s root directory. { \"version\" : \"0.2.0\" , \"configurations\" : [{ \"name\" : \"Chrome\" , \"type\" : \"chrome\" , \"request\" : \"launch\" , \"url\" : \"http://localhost:3000\" , \"webRoot\" : \"${workspaceRoot}/src\" , \"userDataDir\" : \"${workspaceRoot}/.vscode/chrome\" , \"sourceMapPathOverrides\" : { \"webpack:///src/*\" : \"${webRoot}/*\" } }] } Note: the URL may be different if you've made adjustments via the HOST or PORT environment variables . Start your app by running npm start , and start debugging in VS Code by pressing F5 or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code\u2014all from your editor.","title":"Visual Studio Code"},{"location":"developers/react_doc/#webstorm","text":"You would need to have WebStorm and JetBrains IDE Support Chrome extension installed. In the WebStorm menu Run select Edit Configurations... . Then click + and select JavaScript Debug . Paste http://localhost:3000 into the URL field and save the configuration. Note: the URL may be different if you've made adjustments via the HOST or PORT environment variables . Start your app by running npm start , then press ^D on macOS or F9 on Windows and Linux or click the green debug icon to start debugging in WebStorm. The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine.","title":"WebStorm"},{"location":"developers/react_doc/#formatting-code-automatically","text":"Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the Prettier's GitHub page for more information, and look at this page to see it in action . To format our code whenever we make a commit in git, we need to install the following dependencies: npm install --save husky lint-staged prettier Alternatively you may use yarn : yarn add husky lint-staged prettier husky makes it easy to use githooks as if they are npm scripts. lint-staged allows us to run scripts on staged files in git. See this blog post about lint-staged to learn more about it . prettier is the JavaScript formatter we will run before commits. Now we can make sure every file is formatted correctly by adding a few lines to the package.json in the project root. Add the following line to scripts section: \"scripts\": { + \"precommit\": \"lint-staged\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", Next we add a 'lint-staged' field to the package.json , for example: \"dependencies\": { // ... }, + \"lint-staged\": { + \"src/**/*.{js,jsx,json,css}\": [ + \"prettier --single-quote --write\", + \"git add\" + ] + }, \"scripts\": { Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run ./node_modules/.bin/prettier --single-quote --write \"src/**/*.{js,jsx,json,css}\" to format your entire project for the first time. Next you might want to integrate Prettier in your favorite editor. Read the section on Editor Integration on the Prettier GitHub page.","title":"Formatting Code Automatically"},{"location":"developers/react_doc/#changing-the-page-lttitlegt","text":"You can find the source HTML file in the public folder of the generated project. You may edit the <title> tag in it to change the title from \u201cReact App\u201d to anything else. Note that normally you wouldn\u2019t edit files in the public folder very often. For example, adding a stylesheet is done without touching the HTML. If you need to dynamically update the page title based on the content, you can use the browser document.title API. For more complex scenarios when you want to change the title from React components, you can use React Helmet , a third party library. If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in this section . Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered here .","title":"Changing the Page &lt;title&gt;"},{"location":"developers/react_doc/#installing-a-dependency","text":"The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with npm : npm install --save react-router Alternatively you may use yarn : yarn add react-router This works for any library, not just react-router .","title":"Installing a Dependency"},{"location":"developers/react_doc/#importing-a-component","text":"This project setup supports ES6 modules thanks to Babel. While you can still use require() and module.exports , we encourage you to use import and export instead. For example:","title":"Importing a Component"},{"location":"developers/react_doc/#buttonjs","text":"import React , { Component } from 'react' ; class Button extends Component { render () { // ... } } export default Button ; // Don\u2019t forget to use export default!","title":"Button.js"},{"location":"developers/react_doc/#dangerbuttonjs","text":"import React , { Component } from 'react' ; import Button from './Button' ; // Import a component from another file class DangerButton extends Component { render () { return < Button color = \"red\" /> ; } } export default DangerButton ; Be aware of the difference between default and named exports . It is a common source of mistakes. We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That\u2019s what you get when you use export default Button and import Button from './Button' . Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like. Learn more about ES6 modules: When to use the curly braces? Exploring ES6: Modules Understanding ES6: Modules","title":"DangerButton.js"},{"location":"developers/react_doc/#code-splitting","text":"Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand. This project setup supports code splitting via dynamic import() . Its proposal is in stage 3. The import() function-like form takes the module name as an argument and returns a Promise which always resolves to the namespace object of the module. Here is an example:","title":"Code Splitting"},{"location":"developers/react_doc/#moduleajs","text":"const moduleA = 'Hello' ; export { moduleA };","title":"moduleA.js"},{"location":"developers/react_doc/#appjs","text":"import React , { Component } from 'react' ; class App extends Component { handleClick = () => { import ( './moduleA' ) . then (({ moduleA }) => { // Use moduleA }) . catch ( err => { // Handle failure }); }; render () { return ( < div > < button onClick = { this . handleClick } > Load < /button> < /div> ); } } export default App ; This will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button. You can also use it with async / await syntax if you prefer it.","title":"App.js"},{"location":"developers/react_doc/#with-react-router","text":"If you are using React Router check out this tutorial on how to use code splitting with it. You can find the companion GitHub repository here . Also check out the Code Splitting section in React documentation.","title":"With React Router"},{"location":"developers/react_doc/#adding-a-stylesheet","text":"This project setup uses Webpack for handling all assets. Webpack offers a custom way of \u201cextending\u201d the concept of import beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to import the CSS from the JavaScript file :","title":"Adding a Stylesheet"},{"location":"developers/react_doc/#buttoncss","text":". Button { padding : 20 px ; }","title":"Button.css"},{"location":"developers/react_doc/#buttonjs_1","text":"import React , { Component } from 'react' ; import './Button.css' ; // Tell Webpack that Button.js uses these styles class Button extends Component { render () { // You can use them as regular CSS styles return < div className = \"Button\" /> ; } } This is not required for React but many people find this feature convenient. You can read about the benefits of this approach here . However you should be aware that this makes your code less portable to other build tools and environments than Webpack. In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified .css file in the build output. If you are concerned about using Webpack-specific semantics, you can put all your CSS right into src/index.css . It would still be imported from src/index.js , but you could always remove that import if you later migrate to a different build tool.","title":"Button.js"},{"location":"developers/react_doc/#post-processing-css","text":"This project setup minifies your CSS and adds vendor prefixes to it automatically through Autoprefixer so you don\u2019t need to worry about it. For example, this: . App { display : flex ; flex-direction : row ; align-items : center ; } becomes this: . App { display : -webkit- box ; display : -ms- flexbox ; display : flex ; -webkit- box-orient : horizontal ; -webkit- box-direction : normal ; -ms- flex-direction : row ; flex-direction : row ; -webkit- box-align : center ; -ms- flex-align : center ; align-items : center ; } If you need to disable autoprefixing for some reason, follow this section .","title":"Post-Processing CSS"},{"location":"developers/react_doc/#adding-a-css-preprocessor-sass-less-etc","text":"Generally, we recommend that you don\u2019t reuse the same CSS classes across different components. For example, instead of using a .Button CSS class in <AcceptButton> and <RejectButton> components, we recommend creating a <Button> component with its own .Button styles, that both <AcceptButton> and <RejectButton> can render (but not inherit ). Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative. First, let\u2019s install the command-line interface for Sass: npm install --save node-sass-chokidar Alternatively you may use yarn : yarn add node-sass-chokidar Then in package.json , add the following lines to scripts : \"scripts\": { + \"build-css\": \"node-sass-chokidar src/ -o src/\", + \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", Note: To use a different preprocessor, replace build-css and watch-css commands according to your preprocessor\u2019s documentation. Now you can rename src/App.css to src/App.scss and run npm run watch-css . The watcher will find every Sass file in src subdirectories, and create a corresponding CSS file next to it, in our case overwriting src/App.css . Since src/App.js still imports src/App.css , the styles become a part of your application. You can now edit src/App.scss , and src/App.css will be regenerated. To share variables between Sass files, you can use Sass imports. For example, src/App.scss and other component style files could include @import \"./shared.scss\"; with variable definitions. To enable importing files without using relative paths, you can add the --include-path option to the command in package.json . \" build-css \" : \" node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ \" , \" watch-css \" : \" npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive \" , This will allow you to do imports like @import 'styles/_colors.scss' ; // assuming a styles directory under src/ @import 'nprogress/nprogress' ; // importing a css file from the nprogress node module At this point you might want to remove all CSS files from the source control, and add src/**/*.css to your .gitignore file. It is generally a good practice to keep the build products outside of the source control. As a final step, you may find it convenient to run watch-css automatically with npm start , and run build-css as a part of npm run build . You can use the && operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this: npm install --save npm-run-all Alternatively you may use yarn : yarn add npm-run-all Then we can change start and build scripts to include the CSS preprocessor commands: \"scripts\": { \"build-css\": \"node-sass-chokidar src/ -o src/\", \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\", - \"start\": \"react-scripts-ts start\", - \"build\": \"react-scripts-ts build\", + \"start-js\": \"react-scripts-ts start\", + \"start\": \"npm-run-all -p watch-css start-js\", + \"build\": \"npm run build-css && react-scripts-ts build\", \"test\": \"react-scripts test --env=jsdom\", \"eject\": \"react-scripts eject\" } Now running npm start and npm run build also builds Sass files. Why node-sass-chokidar ? node-sass has been reported as having the following issues: node-sass --watch has been reported to have performance issues in certain conditions when used in a virtual machine or with docker. Infinite styles compiling #1939 node-sass has been reported as having issues with detecting new files in a directory #1891 node-sass-chokidar is used here as it addresses these issues.","title":"Adding a CSS Preprocessor (Sass, Less etc.)"},{"location":"developers/react_doc/#adding-images-fonts-and-files","text":"With Webpack, using static assets like images and fonts works similarly to CSS. You can import a file right in a TypeScript module . This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the src attribute of an image or the href of a link to a PDF. To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a data URI instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to #1153 . Before getting started, you must define each type of asset as a valid module format. Otherwise, the TypeScript compiler will generate an error like this: Cannot find module './logo.png'. To import asset files in TypeScript, create a new type definition file in your project, and name it something like assets.d.ts . Then, add a line for each type of asset that you need to import: declare module \"*.gif\" ; declare module \"*.jpg\" ; declare module \"*.jpeg\" ; declare module \"*.png\" ; declare module \"*.svg\" ; (you'll have to restart the compiler in order the changes to take place) In this case, we've added several image file extensions as valid module formats. Now that the compiler is configured, here is an example of importing an image file: import React from 'react' ; import logo from './logo.svg' ; // Tell Webpack this JS file uses this image console . log ( logo ); // /logo.84287d09.png function Header () { // Import result is the URL of your image return < img src = { logo } alt = \"Logo\" /> ; } export default Header ; This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths. This works in CSS too: . Logo { background-image : url ( ./logo.png ); } Webpack finds all relative module references in CSS (they start with ./ ) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don\u2019t need to worry about long-term caching of assets. Please be advised that this is also a custom feature of Webpack. It is not required for React but many people enjoy it (and React Native uses a similar mechanism for images). An alternative way of handling static assets is described in the next section.","title":"Adding Images, Fonts, and Files"},{"location":"developers/react_doc/#using-the-public-folder","text":"Note: this feature is available with react-scripts@0.5.0 and higher.","title":"Using the public Folder"},{"location":"developers/react_doc/#changing-the-html","text":"The public folder contains the HTML file so you can tweak it, for example, to set the page title . The <script> tag with the compiled code will be added to it automatically during the build process.","title":"Changing the HTML"},{"location":"developers/react_doc/#adding-assets-outside-of-the-module-system","text":"You can also add other assets to the public folder. Note that we normally encourage you to import assets in JavaScript files instead. For example, see the sections on adding a stylesheet and adding images and fonts . This mechanism provides a number of benefits: Scripts and stylesheets get minified and bundled together to avoid extra network requests. Missing files cause compilation errors instead of 404 errors for your users. Result filenames include content hashes so you don\u2019t need to worry about browsers caching their old versions. However there is an escape hatch that you can use to add an asset outside of the module system. If you put a file into the public folder, it will not be processed by Webpack. Instead it will be copied into the build folder untouched. To reference assets in the public folder, you need to use a special variable called PUBLIC_URL . Inside index.html , you can use it like this: < link rel = \"shortcut icon\" href = \"%PUBLIC_URL%/favicon.ico\" > Only files inside the public folder will be accessible by %PUBLIC_URL% prefix. If you need to use a file from src or node_modules , you\u2019ll have to copy it there to explicitly specify your intention to make this file a part of the build. When you run npm run build , Create React App will substitute %PUBLIC_URL% with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL. In JavaScript code, you can use process.env.PUBLIC_URL for similar purposes: render () { // Note: this is an escape hatch and should be used sparingly! // Normally we recommend using `import` for getting asset URLs // as described in \u201cAdding Images and Fonts\u201d above this section. return < img src = { process . env . PUBLIC_URL + '/img/logo.png' } /> ; } Keep in mind the downsides of this approach: None of the files in public folder get post-processed or minified. Missing files will not be called at compilation time, and will cause 404 errors for your users. Result filenames won\u2019t include content hashes so you\u2019ll need to add query arguments or rename them every time they change.","title":"Adding Assets Outside of the Module System"},{"location":"developers/react_doc/#when-to-use-the-public-folder","text":"Normally we recommend importing stylesheets , images, and fonts from JavaScript. The public folder is useful as a workaround for a number of less common cases: You need a file with a specific name in the build output, such as manifest.webmanifest . You have thousands of images and need to dynamically reference their paths. You want to include a small script like pace.js outside of the bundled code. Some library may be incompatible with Webpack and you have no other option but to include it as a <script> tag. Note that if you add a <script> that declares global variables, you also need to read the next section on using them.","title":"When to Use the public Folder"},{"location":"developers/react_doc/#using-global-variables","text":"When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable. You can avoid this by reading the global variable explicitly from the window object, for example: const $ = window . $ ; This makes it obvious you are using a global variable intentionally rather than because of a typo. Alternatively, you can force the linter to ignore any line by adding // eslint-disable-line after it.","title":"Using Global Variables"},{"location":"developers/react_doc/#adding-bootstrap","text":"You don\u2019t have to use React Bootstrap together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps: Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well: npm install --save react-bootstrap bootstrap@3 Alternatively you may use yarn : yarn add react-bootstrap bootstrap@3 Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your src/index.js file: import 'bootstrap/dist/css/bootstrap.css' ; import 'bootstrap/dist/css/bootstrap-theme.css' ; // Put any other imports below so that CSS from your // components takes precedence over default styles. Import required React Bootstrap components within src/App.js file or your custom component files: import { Navbar , Jumbotron , Button } from 'react-bootstrap' ; Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example App.js redone using React Bootstrap.","title":"Adding Bootstrap"},{"location":"developers/react_doc/#using-a-custom-theme","text":"Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package). We suggest the following approach: Create a new package that depends on the package you wish to customize, e.g. Bootstrap. Add the necessary build steps to tweak the theme, and publish your package on npm. Install your own theme npm package as a dependency of your app. Here is an example of adding a customized Bootstrap that follows these steps.","title":"Using a Custom Theme"},{"location":"developers/react_doc/#adding-flow","text":"Flow is a static type checker that helps you write code with fewer bugs. Check out this introduction to using static types in JavaScript if you are new to this concept. Recent versions of Flow work with Create React App projects out of the box. To add Flow to a Create React App project, follow these steps: Run npm install --save flow-bin (or yarn add flow-bin ). Add \"flow\": \"flow\" to the scripts section of your package.json . Run npm run flow init (or yarn flow init ) to create a .flowconfig file in the root directory. Add // @flow to any files you want to type check (for example, to src/App.js ). Now you can run npm run flow (or yarn flow ) to check the files for type errors. You can optionally use an IDE like Nuclide for a better integrated experience. In the future we plan to integrate it into Create React App even more closely. To learn more about Flow, check out its documentation .","title":"Adding Flow"},{"location":"developers/react_doc/#adding-a-router","text":"Create React App doesn't prescribe a specific routing solution, but React Router is the most popular one. To add it, run: npm install --save react-router-dom Alternatively you may use yarn : yarn add react-router-dom To try it, delete all the code in src/App.js and replace it with any of the examples on its website. The Basic Example is a good place to get started. Note that you may need to configure your production server to support client-side routing before deploying your app.","title":"Adding a Router"},{"location":"developers/react_doc/#adding-custom-environment-variables","text":"Note: this feature is available with react-scripts@0.2.3 and higher. Your project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have NODE_ENV defined for you, and any other environment variables starting with REACT_APP_ . The environment variables are embedded during the build time . Since Create React App produces a static HTML/CSS/JS bundle, it can\u2019t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like described here . Alternatively you can rebuild the app on the server anytime you change them. Note: You must create custom environment variables beginning with REACT_APP_ . Any other variables except NODE_ENV will be ignored to avoid accidentally exposing a private key on the machine that could have the same name . Changing any environment variables will require you to restart the development server if it is running. These environment variables will be defined for you on process.env . For example, having an environment variable named REACT_APP_SECRET_CODE will be exposed in your JS as process.env.REACT_APP_SECRET_CODE . There is also a special built-in environment variable called NODE_ENV . You can read it from process.env.NODE_ENV . When you run npm start , it is always equal to 'development' , when you run npm test it is always equal to 'test' , and when you run npm run build to make a production bundle, it is always equal to 'production' . You cannot override NODE_ENV manually. This prevents developers from accidentally deploying a slow development build to production. These environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control. First, you need to have environment variables defined. For example, let\u2019s say you wanted to consume a secret defined in the environment inside a <form> : render () { return ( < div > < small > You are running this application in < b > { process . env . NODE_ENV } </ b > mode . </ small > < form > < input type = \" hidden \" defaultValue = { process . env . REACT_APP_SECRET_CODE } /> </ form > </ div > ) ; } During the build, process.env.REACT_APP_SECRET_CODE will be replaced with the current value of the REACT_APP_SECRET_CODE environment variable. Remember that the NODE_ENV variable will be set for you automatically. When you load the app in the browser and inspect the <input> , you will see its value set to abcdef , and the bold text will show the environment provided when using npm start : < div > < small > You are running this application in < b > development </ b > mode. </ small > < form > < input type = \"hidden\" value = \"abcdef\" /> </ form > </ div > The above form is looking for a variable called REACT_APP_SECRET_CODE from the environment. In order to consume this value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in a .env file. Both of these ways are described in the next few sections. Having access to the NODE_ENV is also useful for performing actions conditionally: if ( process . env . NODE_ENV !== 'production' ) { analytics . disable (); } When you compile the app with npm run build , the minification step will strip out this condition, and the resulting bundle will be smaller.","title":"Adding Custom Environment Variables"},{"location":"developers/react_doc/#referencing-environment-variables-in-the-html","text":"Note: this feature is available with react-scripts@0.9.0 and higher. You can also access the environment variables starting with REACT_APP_ in the public/index.html . For example: < title > %REACT_APP_WEBSITE_NAME% </ title > Note that the caveats from the above section apply: Apart from a few built-in variables ( NODE_ENV and PUBLIC_URL ), variable names must start with REACT_APP_ to work. The environment variables are injected at build time. If you need to inject them at runtime, follow this approach instead .","title":"Referencing Environment Variables in the HTML"},{"location":"developers/react_doc/#adding-temporary-environment-variables-in-your-shell","text":"Defining environment variables can vary between OSes. It\u2019s also important to know that this manner is temporary for the life of the shell session.","title":"Adding Temporary Environment Variables In Your Shell"},{"location":"developers/react_doc/#windows-cmdexe","text":"set \"REACT_APP_SECRET_CODE=abcdef\" && npm start (Note: Quotes around the variable assignment are required to avoid a trailing whitespace.)","title":"Windows (cmd.exe)"},{"location":"developers/react_doc/#windows-powershell","text":"( $env:REACT_APP_SECRET_CODE = \"abcdef\" ) -and ( npm start )","title":"Windows (Powershell)"},{"location":"developers/react_doc/#linux-macos-bash","text":"REACT_APP_SECRET_CODE = abcdef npm start","title":"Linux, macOS (Bash)"},{"location":"developers/react_doc/#adding-development-environment-variables-in-env","text":"Note: this feature is available with react-scripts@0.5.0 and higher. To define permanent environment variables, create a file called .env in the root of your project: REACT_APP_SECRET_CODE = abcdef Note: You must create custom environment variables beginning with REACT_APP_ . Any other variables except NODE_ENV will be ignored to avoid accidentally exposing a private key on the machine that could have the same name . Changing any environment variables will require you to restart the development server if it is running. .env files should be checked into source control (with the exclusion of .env*.local ).","title":"Adding Development Environment Variables In .env"},{"location":"developers/react_doc/#what-other-env-files-are-can-be-used","text":"Note: this feature is available with react-scripts@1.0.0 and higher . .env : Default. .env.local : Local overrides. This file is loaded for all environments except test. .env.development , .env.test , .env.production : Environment-specific settings. .env.development.local , .env.test.local , .env.production.local : Local overrides of environment-specific settings. Files on the left have more priority than files on the right: npm start : .env.development.local , .env.development , .env.local , .env npm run build : .env.production.local , .env.production , .env.local , .env npm test : .env.test.local , .env.test , .env (note .env.local is missing) These variables will act as the defaults if the machine does not explicitly set them. Please refer to the dotenv documentation for more details. Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need these defined as well. Consult their documentation how to do this. For example, see the documentation for Travis CI or Heroku .","title":"What other .env files are can be used?"},{"location":"developers/react_doc/#expanding-environment-variables-in-env","text":"Note: this feature is available with react-scripts@1.1.0 and higher. Expand variables already on your machine for use in your .env file (using dotenv-expand ). For example, to get the environment variable npm_package_version : REACT_APP_VERSION= $npm_package_version # also works: # REACT_APP_VERSION= ${ npm_package_version } Or expand variables local to the current .env file: DOMAIN = www . example . com REACT_APP_FOO = $ DOMAIN / foo REACT_APP_BAR = $ DOMAIN / bar","title":"Expanding Environment Variables In .env"},{"location":"developers/react_doc/#can-i-use-decorators","text":"Many popular libraries use decorators in their documentation. Create React App doesn\u2019t support decorator syntax at the moment because: It is an experimental proposal and is subject to change. The current specification version is not officially supported by Babel. If the specification changes, we won\u2019t be able to write a codemod because we don\u2019t use them internally at Facebook. However in many cases you can rewrite decorator-based code without decorators just as fine. Please refer to these two threads for reference: #214 #411 Create React App will add decorator support when the specification advances to a stable stage.","title":"Can I Use Decorators?"},{"location":"developers/react_doc/#fetching-data-with-ajax-requests","text":"React doesn't prescribe a specific approach to data fetching, but people commonly use either a library like axios or the fetch() API provided by the browser. Conveniently, Create React App includes a polyfill for fetch() so you can use it without worrying about the browser support. The global fetch function allows to easily makes AJAX requests. It takes in a URL as an input and returns a Promise that resolves to a Response object. You can find more information about fetch here . This project also includes a Promise polyfill which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises here and here . Both axios and fetch() use Promises under the hood. You can also use the async / await syntax to reduce the callback nesting. You can learn more about making AJAX requests from React components in the FAQ entry on the React website .","title":"Fetching Data with AJAX Requests"},{"location":"developers/react_doc/#integrating-with-an-api-backend","text":"These tutorials will help you to integrate your app with an API backend running on another port, using fetch() to access it.","title":"Integrating with an API Backend"},{"location":"developers/react_doc/#node","text":"Check out this tutorial . You can find the companion GitHub repository here .","title":"Node"},{"location":"developers/react_doc/#ruby-on-rails","text":"Check out this tutorial . You can find the companion GitHub repository here .","title":"Ruby on Rails"},{"location":"developers/react_doc/#proxying-api-requests-in-development","text":"Note: this feature is available with react-scripts@0.2.3 and higher. People often serve the front-end React app from the same host and port as their backend implementation. For example, a production setup might look like this after the app is deployed: / - static server returns index . html with React app / todos - static server returns index . html with React app / api / todos - server handles any / api /* requests using the backend implementation Such setup is not required. However, if you do have a setup like this, it is convenient to write requests like fetch('/api/todos') without worrying about redirecting them to another host or port during development. To tell the development server to proxy any unknown requests to your API server in development, add a proxy field to your package.json , for example: \"proxy\" : \"http://localhost:4000\" , This way, when you fetch('/api/todos') in development, the development server will recognize that it\u2019s not a static asset, and will proxy your request to http://localhost:4000/api/todos as a fallback. The development server will only attempt to send requests without a text/html accept header to the proxy. Conveniently, this avoids CORS issues and error messages like this in development: Fetch API cannot load http : // localhost : 4000 / api / todos . No ' Access-Control-Allow-Origin ' header is present on the requested resource . Origin ' http://localhost:3000 ' is therefore not allowed access . If an opaque response serves your needs , set the request ' s mode to ' no - cors ' to fetch the resource with CORS disabled. Keep in mind that proxy only has effect in development (with npm start ), and it is up to you to ensure that URLs like /api/todos point to the right thing in production. You don\u2019t have to use the /api prefix. Any unrecognized request without a text/html accept header will be redirected to the specified proxy . The proxy option supports HTTP, HTTPS and WebSocket connections. If the proxy option is not flexible enough for you, alternatively you can: Configure the proxy yourself Enable CORS on your server ( here\u2019s how to do it for Express ). Use environment variables to inject the right server host and port into your app.","title":"Proxying API Requests in Development"},{"location":"developers/react_doc/#invalid-host-header-errors-after-configuring-proxy","text":"When you enable the proxy option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in this article and this issue . This shouldn\u2019t affect you when developing on localhost , but if you develop remotely like described here , you will see this error in the browser after enabling the proxy option: Invalid Host header To work around it, you can specify your public development host in a file called .env.development in the root of your project: HOST = mypublicdevhost . com If you restart the development server now and load the app from the specified host, it should work. If you are still having issues or if you\u2019re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to .env.development.local . Note that this is dangerous and exposes your machine to remote code execution from malicious websites: # NOTE : THIS IS DANGEROUS ! # It exposes your machine to attacks from the websites you visit . DANGEROUSLY_DISABLE_HOST_CHECK = true We don\u2019t recommend this approach.","title":"\"Invalid Host Header\" Errors After Configuring Proxy"},{"location":"developers/react_doc/#configuring-the-proxy-manually","text":"Note: this feature is available with react-scripts@1.0.0 and higher. If the proxy option is not flexible enough for you, you can specify an object in the following form (in package.json ). You may also specify any configuration value http-proxy-middleware or http-proxy supports. { // ... \"proxy\" : { \"/api\" : { \"target\" : \"<url>\" , \"ws\" : true // ... } } // ... } All requests matching this path will be proxies, no exceptions. This includes requests for text/html , which the standard proxy option does not proxy. If you need to specify multiple proxies, you may do so by specifying additional entries. You may also narrow down matches using * and/or ** , to match the path exactly or any subpath. { // ... \"proxy\" : { // Matches any request starting with /api \"/api\" : { \"target\" : \"<url_1>\" , \"ws\" : true // ... }, // Matches any request starting with /foo \"/foo\" : { \"target\" : \"<url_2>\" , \"ssl\" : true , \"pathRewrite\" : { \"^/foo\" : \"/foo/beta\" } // ... }, // Matches /bar/abc.html but not /bar/sub/def.html \"/bar/*.html\" : { \"target\" : \"<url_3>\" , // ... }, // Matches /baz/abc.html and /baz/sub/def.html \"/baz/**/*.html\" : { \"target\" : \"<url_4>\" // ... } } // ... }","title":"Configuring the Proxy Manually"},{"location":"developers/react_doc/#configuring-a-websocket-proxy","text":"When setting up a WebSocket proxy, there are a some extra considerations to be aware of. If you\u2019re using a WebSocket engine like Socket.io , you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with the websocket.org echo test . There\u2019s some good documentation available for setting up a Socket.io server . Standard WebSockets will work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like ws for the server, with native WebSockets in the browser . Either way, you can proxy WebSocket requests manually in package.json : { // ... \"proxy\" : { \"/socket\" : { // Your compatible WebSocket server \"target\" : \"ws://<socket_url>\" , // Tell http-proxy-middleware that this is a WebSocket proxy. // Also allows you to proxy WebSocket requests without an additional HTTP request // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade \"ws\" : true // ... } } // ... }","title":"Configuring a WebSocket Proxy"},{"location":"developers/react_doc/#using-https-in-development","text":"Note: this feature is available with react-scripts@0.4.0 and higher. You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using the \"proxy\" feature to proxy requests to an API server when that API server is itself serving HTTPS. To do this, set the HTTPS environment variable to true , then start the dev server as usual with npm start :","title":"Using HTTPS in Development"},{"location":"developers/react_doc/#windows-cmdexe_1","text":"set HTTPS = true && npm start","title":"Windows (cmd.exe)"},{"location":"developers/react_doc/#windows-powershell_1","text":"( $env:HTTPS = $true ) -and ( npm start ) (Note: the lack of whitespace is intentional.)","title":"Windows (Powershell)"},{"location":"developers/react_doc/#linux-macos-bash_1","text":"HTTPS = true npm start Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.","title":"Linux, macOS (Bash)"},{"location":"developers/react_doc/#generating-dynamic-ltmetagt-tags-on-the-server","text":"Since Create React App doesn\u2019t support server rendering, you might be wondering how to make <meta> tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this: <!doctype html> < html lang = \"en\" > < head > < meta property = \"og:title\" content = \"__OG_TITLE__\" > < meta property = \"og:description\" content = \"__OG_DESCRIPTION__\" > Then, on the server, regardless of the backend you use, you can read index.html into memory and replace __OG_TITLE__ , __OG_DESCRIPTION__ , and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML! If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.","title":"Generating Dynamic &lt;meta&gt; Tags on the Server"},{"location":"developers/react_doc/#pre-rendering-into-static-html-files","text":"If you\u2019re hosting your build with a static hosting provider you can use react-snapshot to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or \u201chydrated\u201d, when the JavaScript bundle has loaded. There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes. The primary benefit of pre-rendering is that you get the core content of each page with the HTML payload\u2014regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines. You can read more about zero-configuration pre-rendering (also called snapshotting) here .","title":"Pre-Rendering into Static HTML Files"},{"location":"developers/react_doc/#injecting-data-from-the-server-into-the-page","text":"Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example: <! doctype html > < html lang = \"en\" > < head > < script > window . SERVER_DATA = __SERVER_DATA__ ; < /script> Then, on the server, you can replace __SERVER_DATA__ with a JSON of real data right before sending the response. The client code can then read window.SERVER_DATA to use it. Make sure to sanitize the JSON before sending it to the client as it makes your app vulnerable to XSS attacks.","title":"Injecting Data from the Server into the Page"},{"location":"developers/react_doc/#running-tests","text":"Note: this feature is available with react-scripts@0.3.0 and higher. Read the migration guide to learn how to enable it in older projects! Create React App uses Jest as its test runner. To prepare for this integration, we did a major revamp of Jest so if you heard bad things about it years ago, give it another try. Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness. While Jest provides browser globals such as window thanks to jsdom , they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks. We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.","title":"Running Tests"},{"location":"developers/react_doc/#filename-conventions","text":"Jest will look for test files with any of the following popular naming conventions: Files with .js suffix in __tests__ folders. Files with .test.js suffix. Files with .spec.js suffix. The .test.js / .spec.js files (or the __tests__ folders) can be located at any depth under the src top level folder. We recommend to put the test files (or __tests__ folders) next to the code they are testing so that relative imports appear shorter. For example, if App.test.js and App.js are in the same folder, the test just needs to import App from './App' instead of a long relative path. Colocation also helps find tests more quickly in larger projects.","title":"Filename Conventions"},{"location":"developers/react_doc/#command-line-interface","text":"When you run npm test , Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like npm start recompiles the code. The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the \u201cWatch Usage\u201d note that the watcher prints after every run:","title":"Command Line Interface"},{"location":"developers/react_doc/#version-control-integration","text":"By default, when you run npm test , Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don\u2019t often commit the code that doesn\u2019t pass the tests. Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press a in the watch mode to force Jest to run all tests. Jest will always run all tests on a continuous integration server or if the project is not inside a Git or Mercurial repository.","title":"Version Control Integration"},{"location":"developers/react_doc/#writing-tests","text":"To create tests, add it() (or test() ) blocks with the name of the test and its code. You may optionally wrap them in describe() blocks for logical grouping but this is neither required nor recommended. Jest provides a built-in expect() global function for making assertions. A basic test could look like this: import sum from './sum' ; it ( 'sums numbers' , () => { expect ( sum ( 1 , 2 )). toEqual ( 3 ); expect ( sum ( 2 , 2 )). toEqual ( 4 ); }); All expect() matchers supported by Jest are extensively documented here . You can also use jest.fn() and expect(fn).toBeCalled() to create \u201cspies\u201d or mock functions.","title":"Writing Tests"},{"location":"developers/react_doc/#testing-components","text":"There is a broad spectrum of component testing techniques. They range from a \u201csmoke test\u201d verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes. Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven\u2019t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components: import * as React from 'react' ; import * as ReactDOM from 'react-dom' ; import App from './App' ; it ( 'renders without crashing' , () => { const div = document . createElement ( 'div' ); ReactDOM . render ( < App /> , div ); }); This test mounts a component and makes sure that it didn\u2019t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in src/App.test.tsx . When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior. If you\u2019d like to test components in isolation from the child components they render, we recommend using shallow() rendering API from Enzyme . To install it, run: npm install --save-dev enzyme @types/enzyme enzyme-adapter-react-16 @types/enzyme-adapter-react-16 react-test-renderer @types/react-test-renderer Alternatively you may use yarn : yarn add --dev enzyme @types/enzyme enzyme-adapter-react-16 @types/enzyme-adapter-react-16 react-test-renderer @types/react-test-renderer","title":"Testing Components"},{"location":"developers/react_doc/#srcsetupteststs","text":"import * as Enzyme from 'enzyme' ; import * as Adapter from 'enzyme-adapter-react-16' ; Enzyme . configure ({ adapter : new Adapter () }); Note: Keep in mind that if you decide to \"eject\" before creating src/setupTests.js , the resulting package.json file won't contain any reference to it. Read here to learn how to add this after ejecting. Now you can write a smoke test with it: import * as React from 'react' ; import { shallow } from 'enzyme' ; import App from './App' ; it ( 'renders without crashing' , () => { shallow ( < App /> ); }); Unlike the previous smoke test using ReactDOM.render() , this test only renders <App> and doesn\u2019t go deeper. For example, even if <App> itself renders a <Button> that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports full rendering with mount() , and you can also use it for testing state changes and component lifecycle. You can read the Enzyme documentation for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don\u2019t have to use them because Jest provides built-in expect() and jest.fn() for spies. Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers: import * as React from 'react' ; import { shallow } from 'enzyme' ; import App from './App' ; it ( 'renders welcome message' , () => { const wrapper = shallow ( < App /> ); const welcome = < h2 > Welcome to React < /h2>; // expect(wrapper.contains(welcome)).to.equal(true); expect ( wrapper . contains ( welcome )). toEqual ( true ); }); All Jest matchers are extensively documented here . Nevertheless you can use a third-party assertion library like Chai if you want to, as described below. Additionally, you might find jest-enzyme helpful to simplify your tests with readable matchers. The above contains code can be written more simply with jest-enzyme. expect ( wrapper ). toContainReact ( welcome ) To enable this, install jest-enzyme : npm install --save jest-enzyme Alternatively you may use yarn : yarn add jest-enzyme Import it in src/setupTests.ts to make its matchers available in every test: import 'jest-enzyme' ;","title":"src/setupTests.ts"},{"location":"developers/react_doc/#using-third-party-assertion-libraries","text":"We recommend that you use expect() for assertions and jest.fn() for spies. If you are having issues with them please file those against Jest , and we\u2019ll fix them. We intend to keep making them better for React, supporting, for example, pretty-printing React elements as JSX . However, if you are used to other libraries, such as Chai and Sinon , or if you have existing code using them that you\u2019d like to port over, you can import them normally like this: import sinon from 'sinon' ; import { expect } from 'chai' ; and then use them in your tests like you normally do.","title":"Using Third Party Assertion Libraries"},{"location":"developers/react_doc/#initializing-test-environment","text":"Note: this feature is available with react-scripts@0.4.0 and higher. If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a src/setupTests.ts to your project. It will be automatically executed before running your tests. For example:","title":"Initializing Test Environment"},{"location":"developers/react_doc/#srcsetupteststs_1","text":"const localStorageMock = { getItem : jest.fn (), setItem : jest.fn (), clear : jest.fn () }; global . localStorage = localStorageMock Note: Keep in mind that if you decide to \"eject\" before creating src/setupTests.js , the resulting package.json file won't contain any reference to it, so you should manually create the property setupTestFrameworkScriptFile in the configuration for Jest, something like the following: js \"jest\": { // ... \"setupTestFrameworkScriptFile\": \"<rootDir>/src/setupTests.js\" }","title":"src/setupTests.ts"},{"location":"developers/react_doc/#focusing-and-excluding-tests","text":"You can replace it() with xit() to temporarily exclude a test from being executed. Similarly, fit() lets you focus on a specific test without running any other tests.","title":"Focusing and Excluding Tests"},{"location":"developers/react_doc/#coverage-reporting","text":"Jest has an integrated coverage reporter that works well with ES6 and requires no configuration. Run npm test -- --coverage (note extra -- in the middle) to include a coverage report like this: Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.","title":"Coverage Reporting"},{"location":"developers/react_doc/#continuous-integration","text":"By default npm test runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called CI . When creating a build of your application with npm run build linter warnings are not checked by default. Like npm test , you can force the build to perform a linter warning check by setting the environment variable CI . If any warnings are encountered then the build fails. Popular CI servers already set the environment variable CI by default but you can do this yourself too:","title":"Continuous Integration"},{"location":"developers/react_doc/#on-ci-servers","text":"","title":"On CI servers"},{"location":"developers/react_doc/#travis-ci","text":"Following the Travis Getting started guide for syncing your GitHub repository with Travis. You may need to initialize some settings manually in your profile page. Add a .travis.yml file to your git repository. language : node_js node_js : - 6 cache : directories : - node_modules script : - npm run build - npm test Trigger your first build with a git push. Customize your Travis CI Build if needed.","title":"Travis CI"},{"location":"developers/react_doc/#circleci","text":"Follow this article to set up CircleCI with a Create React App project.","title":"CircleCI"},{"location":"developers/react_doc/#on-your-own-environment","text":"","title":"On your own environment"},{"location":"developers/react_doc/#windows-cmdexe_2","text":"set CI = true && npm test set CI = true && npm run build (Note: the lack of whitespace is intentional.)","title":"Windows (cmd.exe)"},{"location":"developers/react_doc/#windows-powershell_2","text":"( $env:CI = $true ) -and ( npm test ) ( $env:CI = $true ) -and ( npm run build )","title":"Windows (Powershell)"},{"location":"developers/react_doc/#linux-macos-bash_2","text":"CI = true npm test CI = true npm run build The test command will force Jest to run tests once instead of launching the watcher. If you find yourself doing this often in development, please file an issue to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows. The build command will check for linter warnings and fail if any are found.","title":"Linux, macOS (Bash)"},{"location":"developers/react_doc/#disabling-jsdom","text":"By default, the package.json of the generated project looks like this: \"scripts\" : { \"start\" : \"react-scripts start\" , \"build\" : \"react-scripts build\" , \"test\" : \"react-scripts test --env=jsdom\" If you know that none of your tests depend on jsdom , you can safely remove --env=jsdom , and your tests will run faster: \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", - \"test\": \"react-scripts test --env=jsdom\" + \"test\": \"react-scripts test\" To help you make up your mind, here is a list of APIs that need jsdom : Any browser globals like window and document ReactDOM.render() TestUtils.renderIntoDocument() ( a shortcut for the above) mount() in Enzyme In contrast, jsdom is not needed for the following APIs: TestUtils.createRenderer() (shallow rendering) shallow() in Enzyme Finally, jsdom is also not needed for snapshot testing .","title":"Disabling jsdom"},{"location":"developers/react_doc/#snapshot-testing","text":"Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. Read more about snapshot testing.","title":"Snapshot Testing"},{"location":"developers/react_doc/#editor-integration","text":"If you use Visual Studio Code , there is a Jest extension which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.","title":"Editor Integration"},{"location":"developers/react_doc/#debugging-tests","text":"There are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and Visual Studio Code . Note: debugging tests requires Node 8 or higher.","title":"Debugging Tests"},{"location":"developers/react_doc/#debugging-tests-in-chrome","text":"Add the following to the scripts section in your project's package.json \"scripts\" : { \"test:debug\" : \"react-scripts --inspect-brk test --runInBand --env=jsdom\" } Place debugger; statements in any test and run: $ npm run test:debug This will start running your Jest tests, but pause before executing to allow a debugger to attach to the process. Open the following in Chrome about : inspect After opening that link, the Chrome Developer Tools will be displayed. Select inspect on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a \"play\" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack. Note: the --runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.","title":"Debugging Tests in Chrome"},{"location":"developers/react_doc/#debugging-tests-in-visual-studio-code","text":"Debugging Jest tests is supported out of the box for Visual Studio Code . Use the following launch.json configuration file: { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Debug CRA Tests\", \"type\": \"node\", \"request\": \"launch\", \"runtimeExecutable\": \" ${ workspaceRoot } /node_modules/.bin/react-scripts\", \"args\": [ \"test\", \"--runInBand\", \"--no-cache\", \"--env=jsdom\" ], \"cwd\": \" ${ workspaceRoot } \", \"protocol\": \"inspector\", \"console\": \"integratedTerminal\", \"internalConsoleOptions\": \"neverOpen\" } ] }","title":"Debugging Tests in Visual Studio Code"},{"location":"developers/react_doc/#developing-components-in-isolation","text":"Usually, in an app, you have a lot of UI components, and each of them has many different states. For an example, a simple button component could have following states: In a regular state, with a text label. In the disabled mode. In a loading state. Usually, it\u2019s hard to see these states without running a sample app or some examples. Create React App doesn\u2019t include any tools for this by default, but you can easily add Storybook for React ( source ) or React Styleguidist ( source ) to your project. These are third-party tools that let you develop components and see all their states in isolation from your app . You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.","title":"Developing Components in Isolation"},{"location":"developers/react_doc/#getting-started-with-storybook","text":"Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components. First, install the following npm package globally: npm install -g @storybook/cli Then, run the following command inside your app\u2019s directory: getstorybook After that, follow the instructions on the screen. Learn more about React Storybook: Screencast: Getting Started with React Storybook GitHub Repo Documentation Snapshot Testing UI with Storybook + addon/storyshot","title":"Getting Started with Storybook"},{"location":"developers/react_doc/#getting-started-with-styleguidist","text":"Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground. First, install Styleguidist: npm install --save react-styleguidist Alternatively you may use yarn : yarn add react-styleguidist Then, add these scripts to your package.json : \"scripts\": { + \"styleguide\": \"styleguidist server\", + \"styleguide:build\": \"styleguidist build\", \"start\": \"react-scripts start\", Then, run the following command inside your app\u2019s directory: npm run styleguide After that, follow the instructions on the screen. Learn more about React Styleguidist: GitHub Repo Documentation","title":"Getting Started with Styleguidist"},{"location":"developers/react_doc/#publishing-components-to-npm","text":"Create React App doesn't provide any built-in functionality to publish a component to npm. If you're ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like nwb to prepare it for publishing.","title":"Publishing Components to npm"},{"location":"developers/react_doc/#making-a-progressive-web-app","text":"By default, the production build is a fully functional, offline-first Progressive Web App . Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience: All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background. Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the Subway. On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web push notifications . This eliminates the need for the app store. The sw-precache-webpack-plugin is integrated into production configuration, and it will take care of generating a service worker file that will automatically precache all of your local assets and keep them up to date as you deploy updates. The service worker will use a cache-first strategy for handling all requests for local assets, including the initial HTML, ensuring that your web app is reliably fast, even on a slow or unreliable network.","title":"Making a Progressive Web App"},{"location":"developers/react_doc/#opting-out-of-caching","text":"If you would prefer not to enable service workers prior to your initial production deployment, then remove the call to serviceWorkerRegistration.register() from src/index.js . If you had previously enabled service workers in your production deployment and have decided that you would like to disable them for all your existing users, you can swap out the call to serviceWorkerRegistration.register() in src/index.js with a call to serviceWorkerRegistration.unregister() . After the user visits a page that has serviceWorkerRegistration.unregister() , the service worker will be uninstalled. Note that depending on how /service-worker.js is served, it may take up to 24 hours for the cache to be invalidated.","title":"Opting Out of Caching"},{"location":"developers/react_doc/#offline-first-considerations","text":"Service workers require HTTPS , although to facilitate local testing, that policy does not apply to localhost . If your production web server does not support HTTPS, then the service worker registration will fail, but the rest of your web app will remain functional. Service workers are not currently supported in all web browsers. Service worker registration won't be attempted on browsers that lack support. The service worker is only enabled in the production environment , e.g. the output of npm run build . It's recommended that you do not enable an offline-first service worker in a development environment, as it can lead to frustration when previously cached assets are used and do not include the latest changes you've made locally. If you need to test your offline-first service worker locally, build the application (using npm run build ) and run a simple http server from your build directory. After running the build script, create-react-app will give instructions for one way to test your production build locally and the deployment instructions have instructions for using other methods. Be sure to always use an incognito window to avoid complications with your browser cache. If possible, configure your production environment to serve the generated service-worker.js with HTTP caching disabled . If that's not possible\u2014 GitHub Pages , for instance, does not allow you to change the default 10 minute HTTP cache lifetime\u2014then be aware that if you visit your production site, and then revisit again before service-worker.js has expired from your HTTP cache, you'll continue to get the previously cached assets from the service worker. If you have an immediate need to view your updated production deployment, performing a shift-refresh will temporarily disable the service worker and retrieve all assets from the network. Users aren't always familiar with offline-first web apps. It can be useful to let the user know when the service worker has finished populating your caches (showing a \"This web app works offline!\" message) and also let them know when the service worker has fetched the latest updates that will be available the next time they load the page (showing a \"New content is available; please refresh.\" message). Showing this messages is currently left as an exercise to the developer, but as a starting point, you can make use of the logic included in src/registerServiceWorker.js , which demonstrates which service worker lifecycle events to listen for to detect each scenario, and which as a default, just logs appropriate messages to the JavaScript console. By default, the generated service worker file will not intercept or cache any cross-origin traffic, like HTTP API requests , images, or embeds loaded from a different domain. If you would like to use a runtime caching strategy for those requests, you can eject and then configure the runtimeCaching option in the SWPrecacheWebpackPlugin section of webpack.config.prod.js .","title":"Offline-First Considerations"},{"location":"developers/react_doc/#progressive-web-app-metadata","text":"The default configuration includes a web app manifest located at public/manifest.json , that you can customize with details specific to your web application. When a user adds a web app to their homescreen using Chrome or Firefox on Android, the metadata in manifest.json determines what icons, names, and branding colors to use when the web app is displayed. The Web App Manifest guide provides more context about what each field means, and how your customizations will affect your users' experience.","title":"Progressive Web App Metadata"},{"location":"developers/react_doc/#analyzing-the-bundle-size","text":"Source map explorer analyzes JavaScript bundles using the source maps. This helps you understand where code bloat is coming from. To add Source map explorer to a Create React App project, follow these steps: npm install --save source-map-explorer Alternatively you may use yarn : yarn add source-map-explorer Then in package.json , add the following line to scripts : \"scripts\": { + \"analyze\": \"source-map-explorer build/static/js/main.*\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test --env=jsdom\", Then to analyze the bundle run the production build then run the analyze script. npm run build npm run analyze","title":"Analyzing the Bundle Size"},{"location":"developers/react_doc/#deployment","text":"npm run build creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html , and requests to static paths like /static/js/main.<hash>.js are served with the contents of the /static/js/main.<hash>.js file.","title":"Deployment"},{"location":"developers/react_doc/#static-server","text":"For environments using Node , the easiest way to handle this would be to install serve and let it handle the rest: npm install -g serve serve -s build The last command shown above will serve your static site on the port 5000 . Like many of serve \u2019s internal settings, the port can be adjusted using the -p or --port flags. Run this command to get a full list of the options available: serve -h","title":"Static Server"},{"location":"developers/react_doc/#other-solutions","text":"You don\u2019t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one. Here\u2019s a programmatic example using Node and Express : const express = require ( 'express' ); const path = require ( 'path' ); const app = express (); app . use ( express . static ( path . join ( __dirname , 'build' ))); app . get ( '/' , function ( req , res ) { res . sendFile ( path . join ( __dirname , 'build' , 'index.html' )); }); app . listen ( 9000 ); The choice of your server software isn\u2019t important either. Since Create React App is completely platform-agnostic, there\u2019s no need to explicitly use Node. The build folder with static assets is the only output produced by Create React App. However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like /todos/42 in your single-page app.","title":"Other Solutions"},{"location":"developers/react_doc/#serving-apps-with-client-side-routing","text":"If you use routers that use the HTML5 pushState history API under the hood (for example, React Router with browserHistory ), many static file servers will fail. For example, if you used React Router with a route for /todos/42 , the development server will respond to localhost:3000/todos/42 properly, but an Express serving a production build as above will not. This is because when there is a fresh page load for a /todos/42 , the server looks for the file build/todos/42 and does not find it. The server needs to be configured to respond to a request to /todos/42 by serving index.html . For example, we can amend our Express example above to serve index.html for any unknown paths: app.use(express.static(path.join(__dirname, 'build'))); -app.get('/', function (req, res) { +app.get('/*', function (req, res) { res.sendFile(path.join(__dirname, 'build', 'index.html')); }); If you\u2019re using Apache HTTP Server , you need to create a .htaccess file in the public folder that looks like this: Options - MultiViews RewriteEngine On RewriteCond % { REQUEST_FILENAME } !- f RewriteRule ^ index . html [ QSA , L ] It will get copied to the build folder when you run npm run build . If you\u2019re using Apache Tomcat , you need to follow this Stack Overflow answer . Now requests to /todos/42 will be handled correctly both in development and in production. On a production build, and in a browser that supports service workers , the service worker will automatically handle all navigation requests, like for /todos/42 , by serving the cached copy of your index.html . This service worker navigation routing can be configured or disabled by eject ing and then modifying the navigateFallback and navigateFallbackWhitelist options of the SWPreachePlugin configuration .","title":"Serving Apps with Client-Side Routing"},{"location":"developers/react_doc/#building-for-relative-paths","text":"By default, Create React App produces a build assuming your app is hosted at the server root. To override this, specify the homepage in your package.json , for example: \"homepage\" : \"http://mywebsite.com/relativepath\" , This will let Create React App correctly infer the root path to use in the generated HTML file. Note : If you are using react-router@^4 , you can root <Link> s using the basename prop on any <Router> . More information here . For example: < BrowserRouter basename = \"/calendar\" /> < Link to = \"/today\" /> // renders <a href=\"/calendar/today\">","title":"Building for Relative Paths"},{"location":"developers/react_doc/#serving-the-same-build-from-different-paths","text":"Note: this feature is available with react-scripts@0.9.0 and higher. If you are not using the HTML5 pushState history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your package.json : \"homepage\" : \".\" , This will make sure that all the asset paths are relative to index.html . You will then be able to move your app from http://mywebsite.com to http://mywebsite.com/relativepath or even http://mywebsite.com/relative/path without having to rebuild it.","title":"Serving the Same Build from Different Paths"},{"location":"developers/react_doc/#azure","text":"See this blog post on how to deploy your React app to Microsoft Azure .","title":"Azure"},{"location":"developers/react_doc/#firebase","text":"See this blog post or this repo for a way to use automatic deployment to Azure App Service. Install the Firebase CLI if you haven\u2019t already by running npm install -g firebase-tools . Sign up for a Firebase account and create a new project. Run firebase login and login with your previous created Firebase account. Then run the firebase init command from your project\u2019s root. You need to choose the Hosting: Configure and deploy Firebase Hosting sites and choose the Firebase project you created in the previous step. You will need to agree with database.rules.json being created, choose build as the public directory, and also agree to Configure as a single-page app by replying with y . === Project Setup First, let 's associate this project directory with a Firebase project. You can create multiple project aliases by running firebase use --add, but for now we' ll just set up a default project. ? What Firebase project do you want to associate as default? Example app ( example-app-fd690 ) === Database Setup Firebase Realtime Database Rules allow you to define how your data should be structured and when your data can be read from and written to. ? What file should be used for Database Rules? database.rules.json \u2714 Database Rules for example-app-fd690 have been downloaded to database.rules.json. Future modifications to database.rules.json will update Database Rules when you run firebase deploy. === Hosting Setup Your public directory is the folder ( relative to your project directory ) that will contain Hosting assets to uploaded with firebase deploy. If you have a build process for your assets, use your build ' s output directory. ? What do you want to use as your public directory? build ? Configure as a single-page app ( rewrite all urls to /index.html ) ? Yes \u2714 Wrote build/index.html i Writing configuration info to firebase.json... i Writing project information to .firebaserc... \u2714 Firebase initialization complete! IMPORTANT: you need to set proper HTTP caching headers for service-worker.js file in firebase.json file or you will not be able to see changes after first deployment ( issue #2440 ). It should be added inside \"hosting\" key like next: { \"hosting\" : { ... \"headers\" : [ { \"source\" : \"/service-worker.js\" , \"headers\" : [ { \"key\" : \"Cache-Control\" , \"value\" : \"no-cache\" } ] } ] ... Now, after you create a production build with npm run build , you can deploy it by running firebase deploy . === Deploying to 'example-app-fd690' ... i deploying database, hosting \u2714 database: rules ready to deploy. i hosting: preparing build directory for upload... Uploading: [============================== ] 75 %\u2714 hosting: build folder uploaded successfully \u2714 hosting: 8 files uploaded successfully i starting release process ( may take several minutes ) ... \u2714 Deploy complete! Project Console: https://console.firebase.google.com/project/example-app-fd690/overview Hosting URL: https://example-app-fd690.firebaseapp.com For more information see Add Firebase to your JavaScript Project .","title":"Firebase"},{"location":"developers/react_doc/#github-pages","text":"Note: this feature is available with react-scripts@0.2.0 and higher.","title":"GitHub Pages"},{"location":"developers/react_doc/#step-1-add-homepage-to-packagejson","text":"The step below is important! If you skip it, your app will not deploy correctly. Open your package.json and add a homepage field for your project: \"homepage\" : \"https://myusername.github.io/my-app\" , or for a GitHub user page: \"homepage\" : \"https://myusername.github.io\" , Create React App uses the homepage field to determine the root URL in the built HTML file.","title":"Step 1: Add homepage to package.json"},{"location":"developers/react_doc/#step-2-install-gh-pages-and-add-deploy-to-scripts-in-packagejson","text":"Now, whenever you run npm run build , you will see a cheat sheet with instructions on how to deploy to GitHub Pages. To publish it at https://myusername.github.io/my-app , run: npm install --save gh-pages Alternatively you may use yarn : yarn add gh-pages Add the following scripts in your package.json : \"scripts\": { + \"predeploy\": \"npm run build\", + \"deploy\": \"gh-pages -d build\", \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", The predeploy script will run automatically before deploy is run. If you are deploying to a GitHub user page instead of a project page you'll need to make two additional modifications: First, change your repository's source branch to be any branch other than master . Additionally, tweak your package.json scripts to push deployments to master : \"scripts\": { \"predeploy\": \"npm run build\", - \"deploy\": \"gh-pages -d build\", + \"deploy\": \"gh-pages -b master -d build\",","title":"Step 2: Install gh-pages and add deploy to scripts in package.json"},{"location":"developers/react_doc/#step-3-deploy-the-site-by-running-npm-run-deploy","text":"Then run: npm run deploy","title":"Step 3: Deploy the site by running npm run deploy"},{"location":"developers/react_doc/#step-4-ensure-your-projects-settings-use-gh-pages","text":"Finally, make sure GitHub Pages option in your GitHub project settings is set to use the gh-pages branch:","title":"Step 4: Ensure your project\u2019s settings use gh-pages"},{"location":"developers/react_doc/#step-5-optionally-configure-the-domain","text":"You can configure a custom domain with GitHub Pages by adding a CNAME file to the public/ folder.","title":"Step 5: Optionally, configure the domain"},{"location":"developers/react_doc/#notes-on-client-side-routing","text":"GitHub Pages doesn\u2019t support routers that use the HTML5 pushState history API under the hood (for example, React Router using browserHistory ). This is because when there is a fresh page load for a url like http://user.github.io/todomvc/todos/42 , where /todos/42 is a frontend route, the GitHub Pages server returns 404 because it knows nothing of /todos/42 . If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions: You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to hashHistory for this effect, but the URL will be longer and more verbose (for example, http://user.github.io/todomvc/#/todos/42?_k=yknaj ). Read more about different history implementations in React Router. Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your index.html page with a special redirect parameter. You would need to add a 404.html file with the redirection code to the build folder before deploying your project, and you\u2019ll need to add code handling the redirect parameter to index.html . You can find a detailed explanation of this technique in this guide . <<<<<<< HEAD","title":"Notes on client-side routing"},{"location":"developers/react_doc/#heroku","text":"=======","title":"Heroku"},{"location":"developers/react_doc/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"developers/react_doc/#devtty-no-such-a-device-or-address","text":"If, when deploying, you get /dev/tty: No such a device or address or a similar error, try the follwing: Create a new Personal Access Token git remote set-url origin https://<user>:<token>@github.com/<user>/<repo> . Try npm run deploy again","title":"\"/dev/tty: No such a device or address\""},{"location":"developers/react_doc/#heroku_1","text":"dfbc71ce2ae07547a8544cce14a1a23fac99e071 Use the Heroku Buildpack for Create React App . You can find instructions in Deploying React with Zero Configuration .","title":"Heroku"},{"location":"developers/react_doc/#resolving-heroku-deployment-errors","text":"Sometimes npm run build works locally but fails during deploy via Heroku. Following are the most common cases.","title":"Resolving Heroku Deployment Errors"},{"location":"developers/react_doc/#module-not-found-error-cannot-resolve-file-or-directory","text":"If you get something like this: remote : Failed to create a production build . Reason : remote : Module not found : Error : Cannot resolve 'file' or 'directory' MyDirectory in /tmp/build_1234/s rc It means you need to ensure that the lettercase of the file or directory you import matches the one you see on your filesystem or on GitHub. This is important because Linux (the operating system used by Heroku) is case sensitive. So MyDirectory and mydirectory are two distinct directories and thus, even though the project builds locally, the difference in case breaks the import statements on Heroku remotes.","title":"\"Module not found: Error: Cannot resolve 'file' or 'directory'\""},{"location":"developers/react_doc/#could-not-find-a-required-file","text":"If you exclude or ignore necessary files from the package you will see a error similar this one: remote : Could not find a required file . remote : Name : ` index . html ` remote : Searched in : /tmp/build_a2875fc163b209225122d68916f1d4df/ public remote : remote : npm ERR ! Linux 3.13 . 0 - 105 - generic remote : npm ERR ! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\" In this case, ensure that the file is there with the proper lettercase and that\u2019s not ignored on your local .gitignore or ~/.gitignore_global .","title":"\"Could not find a required file.\""},{"location":"developers/react_doc/#netlify","text":"To do a manual deploy to Netlify\u2019s CDN: npm install netlify-cli -g netlify deploy Choose build as the path to deploy. To setup continuous delivery: With this setup Netlify will build and deploy when you push to git or open a pull request: Start a new netlify project Pick your Git hosting service and select your repository Set yarn build as the build command and build as the publish directory Click Deploy site Support for client-side routing: To support pushState , make sure to create a public/_redirects file with the following rewrite rules: /* /index.html 200 When you build the project, Create React App will place the public folder contents into the build output.","title":"Netlify"},{"location":"developers/react_doc/#now","text":"now offers a zero-configuration single-command deployment. You can use now to deploy your app for free. Install the now command-line tool either via the recommended desktop tool or via node with npm install -g now . Build your app by running npm run build . Move into the build directory by running cd build . Run now --name your-project-name from within the build directory. You will see a now.sh URL in your output like this: ``` Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard) ``` Paste that URL into your browser when the build is complete, and you will see your deployed app. Details are available in this article.","title":"Now"},{"location":"developers/react_doc/#s3-and-cloudfront","text":"See this blog post on how to deploy your React app to Amazon Web Services S3 and CloudFront .","title":"S3 and CloudFront"},{"location":"developers/react_doc/#surge","text":"Install the Surge CLI if you haven\u2019t already by running npm install -g surge . Run the surge command and log in you or create a new account. When asked about the project path, make sure to specify the build folder, for example: project path: /path/to/project/build Note that in order to support routers that use HTML5 pushState API, you may want to rename the index.html in your build folder to 200.html before deploying to Surge. This ensures that every URL falls back to that file .","title":"Surge"},{"location":"developers/react_doc/#advanced-configuration","text":"You can adjust various development and production settings by setting environment variables in your shell or with .env . Variable Development Production Usage BROWSER :white_check_mark: :x: By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a browser to override this behavior, or set it to none to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to npm start will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the .js extension. HOST :white_check_mark: :x: By default, the development web server binds to localhost . You may use this variable to specify a different host. PORT :white_check_mark: :x: By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port. HTTPS :white_check_mark: :x: When set to true , Create React App will run the development server in https mode. PUBLIC_URL :x: :white_check_mark: Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in package.json ( homepage ) . Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application. CI :large_orange_diamond: :white_check_mark: When set to true , Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default. REACT_EDITOR :white_check_mark: :x: When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can send a pull request to detect your editor of choice . Setting this environment variable overrides the automatic detection. If you do it, make sure your systems PATH environment variable points to your editor\u2019s bin folder. You can also set it to none to disable it completely. CHOKIDAR_USEPOLLING :white_check_mark: :x: When set to true , the watcher runs in polling mode, as necessary inside a VM. Use this option if npm start isn't detecting changes. GENERATE_SOURCEMAP :x: :white_check_mark: When set to false , source maps are not generated for a production build. This solves OOM issues on some smaller machines. NODE_PATH :white_check_mark: :white_check_mark: Same as NODE_PATH in Node.js , but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting NODE_PATH=src .","title":"Advanced Configuration"},{"location":"developers/react_doc/#troubleshooting_1","text":"","title":"Troubleshooting"},{"location":"developers/react_doc/#npm-start-doesnt-detect-changes","text":"When you save a file while npm start is running, the browser should refresh with the updated code. If this doesn\u2019t happen, try one of the following workarounds: If your project is in a Dropbox folder, try moving it out. If the watcher doesn\u2019t see a file called index.js and you\u2019re referencing it by the folder name, you need to restart the watcher due to a Webpack bug. Some editors like Vim and IntelliJ have a \u201csafe write\u201d feature that currently breaks the watcher. You will need to disable it. Follow the instructions in \u201cAdjusting Your Text Editor\u201d . If your project path contains parentheses, try moving the project to a path without them. This is caused by a Webpack watcher bug . On Linux and macOS, you might need to tweak system settings to allow more watchers. If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an .env file in your project directory if it doesn\u2019t exist, and add CHOKIDAR_USEPOLLING=true to it. This ensures that the next time you run npm start , the watcher uses the polling mode, as necessary inside a VM. If none of these solutions help please leave a comment in this thread .","title":"npm start doesn\u2019t detect changes"},{"location":"developers/react_doc/#npm-test-hangs-on-macos-sierra","text":"If you run npm test and the console gets stuck after printing react-scripts test --env=jsdom to the console there might be a problem with your Watchman installation as described in facebookincubator/create-react-app#713 . We recommend deleting node_modules in your project and running npm install (or yarn if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues: facebook/jest#1767 facebook/watchman#358 ember-cli/ember-cli#6259 It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use Homebrew , you can run these commands to update it: watchman shutdown - server brew update brew reinstall watchman You can find other installation methods on the Watchman documentation page. If this still doesn\u2019t help, try running launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist . There are also reports that uninstalling Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.","title":"npm test hangs on macOS Sierra"},{"location":"developers/react_doc/#npm-run-build-exits-too-early","text":"It is reported that npm run build can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message: The build failed because the process exited too early. This probably means the system ran out of memory or someone called kill -9 on the process. If you are completely sure that you didn't terminate the process, consider adding some swap space to the machine you\u2019re building on, or build the project locally.","title":"npm run build exits too early"},{"location":"developers/react_doc/#npm-run-build-fails-on-heroku","text":"This may be a problem with case sensitive filenames. Please refer to this section .","title":"npm run build fails on Heroku"},{"location":"developers/react_doc/#momentjs-locales-are-missing","text":"If you use a Moment.js , you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of all the locales provided by Moment.js . To add a specific Moment.js locale to your bundle, you need to import it explicitly. For example: import moment from 'moment' ; import 'moment/locale/fr' ; If import multiple locales this way, you can later switch between them by calling moment.locale() with the locale name: import moment from 'moment' ; import 'moment/locale/fr' ; import 'moment/locale/es' ; // ... moment . locale ( 'fr' ); This will only work for locales that have been explicitly imported before.","title":"Moment.js locales are missing"},{"location":"developers/react_doc/#npm-run-build-fails-to-minify","text":"You may occasionally find a package you depend on needs compiled or ships code for a non-browser environment. This is considered poor practice in the ecosystem and does not have an escape hatch in Create React App. To resolve this: 1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled (retaining ES6 Modules). 2. Fork the package and publish a corrected version yourself. 3. If the dependency is small enough, copy it to your src/ folder and treat it as application code. In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.","title":"npm run build fails to minify"},{"location":"developers/react_doc/#alternatives-to-ejecting","text":"Ejecting lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to fork react-scripts and any other packages you need. This article dives into how to do it in depth. You can find more discussion in this issue .","title":"Alternatives to Ejecting"},{"location":"developers/react_doc/#something-missing","text":"If you have ideas for more \u201cHow To\u201d recipes that should be on this page, let us know or contribute some!","title":"Something Missing?"},{"location":"reference/ts-components/","text":"TSComponents \ud83d\udd17 Versi\u00f3n : 2.2.0 El objeto TSComponents contiene distintos componentes exportables que se pueden utilizar dentro de una experiencia web. Est\u00e1 en el archivo llamado components.js y se aloja versionado en el CDN: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js Componentes \ud83d\udd17 graphic : gr\u00e1fico de l\u00edneas, barras o \u00e1rea usado en el explorador de series de tiempo con todas sus funcionalidades. card : tarjeta con informaci\u00f3n de la serie y un gr\u00e1fico inclu\u00eddo con sus datos. \u00bfC\u00f3mo los uso? \ud83d\udd17 Todos los componentes se usan de la misma manera. Importar librer\u00eda JS: < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > Importar hoja de estilos CSS: < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> Definir d\u00f3nde se va a dibujar: < div id = \"graphic_01\" ></ div > < div id = \"card_01\" ></ div > Instanciar el componente que buscamos: TSComponents . Graphic . render ( 'graphic_01' , { ... }) TSComponents . Card . render ( 'card_01' , { ... })","title":"TSComponents"},{"location":"reference/ts-components/#tscomponents","text":"Versi\u00f3n : 2.2.0 El objeto TSComponents contiene distintos componentes exportables que se pueden utilizar dentro de una experiencia web. Est\u00e1 en el archivo llamado components.js y se aloja versionado en el CDN: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js","title":"TSComponents"},{"location":"reference/ts-components/#componentes","text":"graphic : gr\u00e1fico de l\u00edneas, barras o \u00e1rea usado en el explorador de series de tiempo con todas sus funcionalidades. card : tarjeta con informaci\u00f3n de la serie y un gr\u00e1fico inclu\u00eddo con sus datos.","title":"Componentes"},{"location":"reference/ts-components/#como-los-uso","text":"Todos los componentes se usan de la misma manera. Importar librer\u00eda JS: < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > Importar hoja de estilos CSS: < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> Definir d\u00f3nde se va a dibujar: < div id = \"graphic_01\" ></ div > < div id = \"card_01\" ></ div > Instanciar el componente que buscamos: TSComponents . Graphic . render ( 'graphic_01' , { ... }) TSComponents . Card . render ( 'card_01' , { ... })","title":"\u00bfC\u00f3mo los uso?"},{"location":"reference/ts-explorer/","text":"TSExplorer \ud83d\udd17 Versi\u00f3n : 2.4.7 El objeto TSExplorer contiene una one page application con un explorador de series de tiempo, que permite buscar y visualizar series de un cat\u00e1logo de datos abiertos. Est\u00e1 en el archivo llamado main.js y se aloja versionado en el CDN: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js \u00bfC\u00f3mo lo uso? \ud83d\udd17 Importar librer\u00eda JS: < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js' ></ script > Definir d\u00f3nde se va a dibujar: < div id = \"explorer-container\" ></ div > Instanciar el explorador: TSExplorer . render ( 'explorer-container' , { ... }) Ejemplo de uso \ud83d\udd17 < html > < body > < script type = \"text/javascript\" src = \"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js\" ></ script > < div id = \"explorer-container\" ></ div > < script > window . onload = function () { TSExplorer . render ( 'explorer-container' , { featured : [ \"103.1_I2N_2016_M_15\" , \"168.1_T_CAMBIOR_D_0_0_26\" , ], seriesApiUri : \"https://apis.datos.gob.ar/series/api\" , catalogId : 'datosgobar' , formatChartUnits : true , laps : { Diaria : 90 , Mensual : 24 , Trimestral : 20 , Semestral : 10 , Anual : 10 , }, locale : 'AR' }) } </ script > </ body > </ html > Tabla de par\u00e1metros \ud83d\udd17 Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos seriesApiUri Si URI a la API donde buscamos los datos. string Ninguno https://apis.datos.gob.ar/series/api featured No Indica los IDs de las series destacadas string[] [] [\"103.1_I2N_2016_M_15\", \"168.1_T_CAMBIOR_D_0_0_26\"] catalogId No Representa el id del cat\u00e1logo de donde busca las series string Ninguno datosgobar formatChartUnits No Indica si debe formatear a porcentaje los valores entre -1 y 1. boolean true true / false laps No Informaci\u00f3n para traer los \u00faltimos _n_ valores de la serie, con _n_ igual al valor por frecuencia. {Diaria: number, Mensual: number, Trimestral: number, Semestral: number, Anual: number} object true true / false locale No Valores posibles: `\"AR\"` o `\"US\"` (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string \"AR\" \"AR\" / \"US\" Demo online \ud83d\udd17 https://jsfiddle.net/sv6ua42q/1/","title":"TSExplorer"},{"location":"reference/ts-explorer/#tsexplorer","text":"Versi\u00f3n : 2.4.7 El objeto TSExplorer contiene una one page application con un explorador de series de tiempo, que permite buscar y visualizar series de un cat\u00e1logo de datos abiertos. Est\u00e1 en el archivo llamado main.js y se aloja versionado en el CDN: https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js","title":"TSExplorer"},{"location":"reference/ts-explorer/#como-lo-uso","text":"Importar librer\u00eda JS: < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js' ></ script > Definir d\u00f3nde se va a dibujar: < div id = \"explorer-container\" ></ div > Instanciar el explorador: TSExplorer . render ( 'explorer-container' , { ... })","title":"\u00bfC\u00f3mo lo uso?"},{"location":"reference/ts-explorer/#ejemplo-de-uso","text":"< html > < body > < script type = \"text/javascript\" src = \"https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@2.4.7/dist/js/main.js\" ></ script > < div id = \"explorer-container\" ></ div > < script > window . onload = function () { TSExplorer . render ( 'explorer-container' , { featured : [ \"103.1_I2N_2016_M_15\" , \"168.1_T_CAMBIOR_D_0_0_26\" , ], seriesApiUri : \"https://apis.datos.gob.ar/series/api\" , catalogId : 'datosgobar' , formatChartUnits : true , laps : { Diaria : 90 , Mensual : 24 , Trimestral : 20 , Semestral : 10 , Anual : 10 , }, locale : 'AR' }) } </ script > </ body > </ html >","title":"Ejemplo de uso"},{"location":"reference/ts-explorer/#tabla-de-parametros","text":"Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos seriesApiUri Si URI a la API donde buscamos los datos. string Ninguno https://apis.datos.gob.ar/series/api featured No Indica los IDs de las series destacadas string[] [] [\"103.1_I2N_2016_M_15\", \"168.1_T_CAMBIOR_D_0_0_26\"] catalogId No Representa el id del cat\u00e1logo de donde busca las series string Ninguno datosgobar formatChartUnits No Indica si debe formatear a porcentaje los valores entre -1 y 1. boolean true true / false laps No Informaci\u00f3n para traer los \u00faltimos _n_ valores de la serie, con _n_ igual al valor por frecuencia. {Diaria: number, Mensual: number, Trimestral: number, Semestral: number, Anual: number} object true true / false locale No Valores posibles: `\"AR\"` o `\"US\"` (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string \"AR\" \"AR\" / \"US\"","title":"Tabla de par\u00e1metros"},{"location":"reference/ts-explorer/#demo-online","text":"https://jsfiddle.net/sv6ua42q/1/","title":"Demo online"},{"location":"reference/ts-components/card/","text":"Componente: card \ud83d\udd17 El componente card permite embeber tarjetas con informaci\u00f3n de la serie, y un gr\u00e1fico inclu\u00eddo dentro de la misma, en sitios web. .row { width: 90%; margin: auto; display: flex; justify-content: space-around; } Ejemplo base \ud83d\udd17 Ver online: https://jsfiddle.net/cogetynj/ <!-- importa librer\u00eda JS --> < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > <!-- importa hoja de estilos CSS --> < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> <!-- c\u00f3digo HTML donde ubicar un div con una tarjeta --> < div id = \"tmi\" ></ div > <!-- JS que genera la tarjeta en el div --> < script > window . onload = function () { TSComponents . Card . render ( 'tmi' , { // ID de la serie solicitada serieId : '143.3_NO_PR_2004_A_21' }) } </ script > Tabla de par\u00e1metros \ud83d\udd17 Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos serieId Si ID de la serie a buscar. string Ninguno 143.3_NO_PR_2004_A_21 locale No Valores posibles: \"AR\" o \"US\" (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string AR AR o US links No Indica qu\u00e9 enlaces a mostrar bajo la tarjeta para descargar o compartir la misma. string Full Small color No Indica el color a usar para el n\u00famero y el borde de la tarjeta. string #0072BB red hasChart No Indica el tipo de gr\u00e1fico a usar dentro de la tarjeta. string Full Small explicitSign No Permite forzar la presencia de un signo antepuesto al valor mostrado; es decir, si dicho valor resultara positivo, ser\u00e1 precedido por un signo de adici\u00f3n ('+'). Por defecto, se encuentra desactivado. booleano false true title No Especifica el t\u00edtulo de la tarjeta. De no definirse, se considera el t\u00edtulo por defecto de la serie; de definirse como '', se lo omite. string Ninguno Un t\u00edtulo personalizado source No Especifica el texto al pie de la tarjeta, que refiere a la fuente de la informaci\u00f3n. De no definirse, se considera la fuente por defecto de la serie; de definirse como '', se la omite. string Ninguno Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud units No Especifica el texto al pie de la tarjeta, que refiere a las unidades en que se mide el valor mostrado. De no definirse, se consideran las unidades por defecto de la serie; de definirse como '', se las omite. string Ninguno Millones de pesos hasFrame No Permite forzar la presencia de un marco alrededor de la tarjeta y un fondo blanco para la misma. De no estar definido, la tarjeta tendr\u00e1 marco si tiene al menos gr\u00e1fico o enlaces. booleano Ninguno true hasColorBar No Permite forzar la presencia de la barra de color (el mismo que posee el n\u00famero) en el borde superior de la tarjeta. De no estar definido, la barr\u00e1 estar\u00e1 presente s\u00f3lo si la tarjeta posee marco. booleano Ninguno false Ejemplo completo \ud83d\udd17 < html > < body > < script type = 'text/javascript' src = 'components.js' ></ script > < div id = \"card1\" ></ div > < script > window . onload = function () { TSComponents . Card . render ( 'card1' , { serieId : '143.3_NO_PR_2004_A_21' , hasChart : 'small' , links : 'full' , locale : 'AR' , color : '#F9A822' , explicitSign : true , title : 'Titulo personalizado' , source : 'Fuente primaria: Mi Fuente' , units : '' , hasFrame : false , hasColorBar : true }) } </ script > </ body > </ html > Demo online \ud83d\udd17 https://jsfiddle.net/cogetynj/ Variantes de tarjetas \ud83d\udd17 Card: default \ud83d\udd17 Card: menos links \ud83d\udd17 Card: sin links \ud83d\udd17 Card: m\u00ednima \ud83d\udd17 Card: m\u00ednima (eliminando elementos) \ud83d\udd17 window.onload = function() { TSComponents.Card.render('ipc', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', title: \"Indice de Precios al Consumidor Nacional\", links: \"none\" }) TSComponents.Card.render('exportaciones', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', title: \"Exportaciones\", links: \"none\" }) TSComponents.Card.render('ipc-card', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', title: \"Exportaciones\" }) TSComponents.Card.render('ipc-card-links2', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', links: \"small\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-links2', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', links: \"small\", title: \"Exportaciones\" }) TSComponents.Card.render('ipc-card-med', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', links: \"none\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-med', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', links: \"none\", title: \"Exportaciones\", hasFrame: false }) TSComponents.Card.render('ipc-card-min', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', links: 'none', hasChart: \"none\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-min', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, links: 'none', hasChart: \"none\", title: \"Exportaciones\", hasColorBar: true }) TSComponents.Card.render('ipc-card-min-xtreme', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', links: 'none', hasChart: \"none\", title: \"\", units: \"\", source: \"\" }) TSComponents.Card.render('exportaciones-card-min-xtreme', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, links: 'none', hasChart: \"none\", title: \"\", units: \"\", source: \"\" }) }","title":"TSComponents: card"},{"location":"reference/ts-components/card/#componente-card","text":"El componente card permite embeber tarjetas con informaci\u00f3n de la serie, y un gr\u00e1fico inclu\u00eddo dentro de la misma, en sitios web. .row { width: 90%; margin: auto; display: flex; justify-content: space-around; }","title":"Componente: card"},{"location":"reference/ts-components/card/#ejemplo-base","text":"Ver online: https://jsfiddle.net/cogetynj/ <!-- importa librer\u00eda JS --> < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > <!-- importa hoja de estilos CSS --> < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> <!-- c\u00f3digo HTML donde ubicar un div con una tarjeta --> < div id = \"tmi\" ></ div > <!-- JS que genera la tarjeta en el div --> < script > window . onload = function () { TSComponents . Card . render ( 'tmi' , { // ID de la serie solicitada serieId : '143.3_NO_PR_2004_A_21' }) } </ script >","title":"Ejemplo base"},{"location":"reference/ts-components/card/#tabla-de-parametros","text":"Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos serieId Si ID de la serie a buscar. string Ninguno 143.3_NO_PR_2004_A_21 locale No Valores posibles: \"AR\" o \"US\" (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string AR AR o US links No Indica qu\u00e9 enlaces a mostrar bajo la tarjeta para descargar o compartir la misma. string Full Small color No Indica el color a usar para el n\u00famero y el borde de la tarjeta. string #0072BB red hasChart No Indica el tipo de gr\u00e1fico a usar dentro de la tarjeta. string Full Small explicitSign No Permite forzar la presencia de un signo antepuesto al valor mostrado; es decir, si dicho valor resultara positivo, ser\u00e1 precedido por un signo de adici\u00f3n ('+'). Por defecto, se encuentra desactivado. booleano false true title No Especifica el t\u00edtulo de la tarjeta. De no definirse, se considera el t\u00edtulo por defecto de la serie; de definirse como '', se lo omite. string Ninguno Un t\u00edtulo personalizado source No Especifica el texto al pie de la tarjeta, que refiere a la fuente de la informaci\u00f3n. De no definirse, se considera la fuente por defecto de la serie; de definirse como '', se la omite. string Ninguno Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud units No Especifica el texto al pie de la tarjeta, que refiere a las unidades en que se mide el valor mostrado. De no definirse, se consideran las unidades por defecto de la serie; de definirse como '', se las omite. string Ninguno Millones de pesos hasFrame No Permite forzar la presencia de un marco alrededor de la tarjeta y un fondo blanco para la misma. De no estar definido, la tarjeta tendr\u00e1 marco si tiene al menos gr\u00e1fico o enlaces. booleano Ninguno true hasColorBar No Permite forzar la presencia de la barra de color (el mismo que posee el n\u00famero) en el borde superior de la tarjeta. De no estar definido, la barr\u00e1 estar\u00e1 presente s\u00f3lo si la tarjeta posee marco. booleano Ninguno false","title":"Tabla de par\u00e1metros"},{"location":"reference/ts-components/card/#ejemplo-completo","text":"< html > < body > < script type = 'text/javascript' src = 'components.js' ></ script > < div id = \"card1\" ></ div > < script > window . onload = function () { TSComponents . Card . render ( 'card1' , { serieId : '143.3_NO_PR_2004_A_21' , hasChart : 'small' , links : 'full' , locale : 'AR' , color : '#F9A822' , explicitSign : true , title : 'Titulo personalizado' , source : 'Fuente primaria: Mi Fuente' , units : '' , hasFrame : false , hasColorBar : true }) } </ script > </ body > </ html >","title":"Ejemplo completo"},{"location":"reference/ts-components/card/#demo-online","text":"https://jsfiddle.net/cogetynj/","title":"Demo online"},{"location":"reference/ts-components/card/#variantes-de-tarjetas","text":"","title":"Variantes de tarjetas"},{"location":"reference/ts-components/card/#card-default","text":"","title":"Card: default"},{"location":"reference/ts-components/card/#card-menos-links","text":"","title":"Card: menos links"},{"location":"reference/ts-components/card/#card-sin-links","text":"","title":"Card: sin links"},{"location":"reference/ts-components/card/#card-minima","text":"","title":"Card: m\u00ednima"},{"location":"reference/ts-components/card/#card-minima-eliminando-elementos","text":"window.onload = function() { TSComponents.Card.render('ipc', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', title: \"Indice de Precios al Consumidor Nacional\", links: \"none\" }) TSComponents.Card.render('exportaciones', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', title: \"Exportaciones\", links: \"none\" }) TSComponents.Card.render('ipc-card', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', title: \"Exportaciones\" }) TSComponents.Card.render('ipc-card-links2', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', links: \"small\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-links2', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', links: \"small\", title: \"Exportaciones\" }) TSComponents.Card.render('ipc-card-med', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', hasChart: 'small', links: \"none\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-med', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, hasChart: 'small', links: \"none\", title: \"Exportaciones\", hasFrame: false }) TSComponents.Card.render('ipc-card-min', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', color: '#F9A822', links: 'none', hasChart: \"none\", title: \"Indice de Precios al Consumidor Nacional\" }) TSComponents.Card.render('exportaciones-card-min', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, links: 'none', hasChart: \"none\", title: \"Exportaciones\", hasColorBar: true }) TSComponents.Card.render('ipc-card-min-xtreme', { serieId: '148.3_INIVELNAL_DICI_M_26:percent_change', links: 'none', hasChart: \"none\", title: \"\", units: \"\", source: \"\" }) TSComponents.Card.render('exportaciones-card-min-xtreme', { serieId: '74.3_IET_0_M_16:percent_change_a_year_ago', explicitSign: true, links: 'none', hasChart: \"none\", title: \"\", units: \"\", source: \"\" }) }","title":"Card: m\u00ednima (eliminando elementos)"},{"location":"reference/ts-components/graphic/","text":"Componente: graphic \ud83d\udd17 El componente graphic permite embeber gr\u00e1ficos de l\u00edneas, \u00e1reas o barras en experiencias web. Permite elegir distintos elementos de filtro de fechas, personalizar los textos, etc. Ejemplo base \ud83d\udd17 Ver online: https://jsfiddle.net/pk0mve5c/ window.onload = function() { TSComponents.Graphic.render('tmi', { graphicUrl: 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg', title: 'Tasa de Mortalidad Infantil de Argentina', source: 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' }) } Este gr\u00e1fico se genera a partir del siguiente c\u00f3digo: <!-- importa librer\u00eda JS --> < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > <!-- importa hoja de estilos CSS --> < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> <!-- c\u00f3digo HTML donde ubicar un div con un gr\u00e1fico --> < div id = \"tmi\" ></ div > <!-- JS que genera el gr\u00e1fico en el div --> < script > window . onload = function () { TSComponents . Graphic . render ( 'tmi' , { // Llamada a la API de Series de Tiempo graphicUrl : 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg' , title : 'Tasa de Mortalidad Infantil de Argentina' , source : 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' }) } </ script > Tabla de par\u00e1metros \ud83d\udd17 Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos graphicUrl Si URL completa del llamado a la API. string Ninguno https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg chartOptions No Cualquier opci\u00f3n v\u00e1lida para [Highcharts](https://api.highcharts.com/highcharts/) object {} navigator No Indica si est\u00e1 habilitada la funcionalidad de navegaci\u00f3n de la serie boolean Din\u00e1mico true / false locale No Valores posibles: \"AR\" o \"US\" (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string AR AR o US zoom No Indica si tiene habilitada la funcionalidad de zoom boolean Din\u00e1mico true / false exportable No Indica si tiene habilitada la funcionalidad de exportar el gr\u00e1fico boolean Din\u00e1mico true / false colors No Colores en formato hexadecimal. Ej: \"#000000\" list [\"#2E7D33\", \"#C62828\", \"#F9A822\", \"#6A1B99\", \"#EC407A\", \"#C2185B\", \"#6A1B99\", \"#039BE5\", \"#6EA100\", \"#0072BB\"] [\"#2E7D33\", \"#C62828\", \"#F9A822\"] backgroundColor No Color de fondo del gr\u00e1fico en formato hexadecimal string #cdcdcd #cdcdcd datePickerEnabled No Indica si el selector de fechas est\u00e1 habilitado boolean Din\u00e1mica true / false legendField No Indica el campo de la serie a usar para mostrar la leyenda string 'title' \"title\", \"description\" o \"id\" chartTypes No Especifica el tipo de gr\u00e1fico a usar para cada serie object 'line' para todas las series {'tmi_arg': 'column', 'tmi_02': 'line', 'tmi_06': 'area'} title No Especifica el t\u00edtulo el gr\u00e1fico string Ninguno Tasa de Mortalidad Infantil de Argentina source No Especifica el texto al pie del gr\u00e1fico string Ninguno Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud displayUnits No Indica si se muestran las unidades del gr\u00e1fico boolean Din\u00e1mico true / false legendLabel No Especifica el texto a mostrar como leyenda por cada serie object {} {'serie01': 'leyenda custom'} seriesAxis No Especifica de qu\u00e9 lado del gr\u00e1fico mostrar las ordenadas y unidades de cada serie representada. Puede haber m\u00e1s de una serie en un mismo lado. Si hay una sola serie, debe ir obligatoriamente del lado izquierdo object {} {'serie01': 'right', 'serie02': 'left'} chartType No Especifica un tipo de gr\u00e1fico para aplicar a todas las series como default. En caso de estar especificado un tipo para una serie en chartTypes, este \u00faltimo ser\u00e1 priorizado para la misma string 'line' 'line', 'area' o 'column' Asignaci\u00f3n din\u00e1mica de atributos \ud83d\udd17 Varios componentes del gr\u00e1fico se muestran/ocultan din\u00e1micamente dependiendo de su tama\u00f1o. Los componentes son din\u00e1micos, en tanto no se especifique su valor de inicializaci\u00f3n: Si un par\u00e1metro se especifica con valor true se muestra siempre. Si el par\u00e1metro es false no se muestra nunca. Si no se especifica, corren las siguientes reglas: zoom : Se muestra si el ancho es mayor o igual a 620px navigator : Se muestra si el ancho es mayor o igual a 500px datePickerEnabled : Se muestra si el ancho es mayor o igual a 400px displayUnits : Se muestra si el ancho es mayor o igual a 450px leyenda : Este no es un campo que se pueda ocultar mediante la API de TSComponents.Graphic , pero los valores de la leyenda se muestran s\u00f3lo si hay m\u00e1s de una serie aplicada. Ejemplo completo \ud83d\udd17 < html > < body > < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> < div id = \"root\" ></ div > < script > window . onload = function () { TSComponents . Graphic . render ( 'root' , { graphicUrl : 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg' , title : 'Tasa de Mortalidad Infantil de Argentina' , source : 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' , legendField : 'title' , chartType : 'area' , chartTypes : { 'tmi_arg' : 'column' }, zoom : true , datePickerEnabled : true , displayUnits : true exportable : true , navigator : false , backgroundColor : '#cdcdcd' , colors : [ '#cecece' , '#8d6b22' , '#62848d' ], locale : 'AR' , chartOptions : {}, legendLabel : { 'tmi_arg' : 'Tasa de mortalidad nacional' }, seriesAxis : { 'tmi_arg' : 'left' } }) } </ script > </ body > </ html >","title":"TSComponents: graphic"},{"location":"reference/ts-components/graphic/#componente-graphic","text":"El componente graphic permite embeber gr\u00e1ficos de l\u00edneas, \u00e1reas o barras en experiencias web. Permite elegir distintos elementos de filtro de fechas, personalizar los textos, etc.","title":"Componente: graphic"},{"location":"reference/ts-components/graphic/#ejemplo-base","text":"Ver online: https://jsfiddle.net/pk0mve5c/ window.onload = function() { TSComponents.Graphic.render('tmi', { graphicUrl: 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg', title: 'Tasa de Mortalidad Infantil de Argentina', source: 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' }) } Este gr\u00e1fico se genera a partir del siguiente c\u00f3digo: <!-- importa librer\u00eda JS --> < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > <!-- importa hoja de estilos CSS --> < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> <!-- c\u00f3digo HTML donde ubicar un div con un gr\u00e1fico --> < div id = \"tmi\" ></ div > <!-- JS que genera el gr\u00e1fico en el div --> < script > window . onload = function () { TSComponents . Graphic . render ( 'tmi' , { // Llamada a la API de Series de Tiempo graphicUrl : 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg' , title : 'Tasa de Mortalidad Infantil de Argentina' , source : 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' }) } </ script >","title":"Ejemplo base"},{"location":"reference/ts-components/graphic/#tabla-de-parametros","text":"Nombre Requerido Descripci\u00f3n Tipo Default Ejemplos graphicUrl Si URL completa del llamado a la API. string Ninguno https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg chartOptions No Cualquier opci\u00f3n v\u00e1lida para [Highcharts](https://api.highcharts.com/highcharts/) object {} navigator No Indica si est\u00e1 habilitada la funcionalidad de navegaci\u00f3n de la serie boolean Din\u00e1mico true / false locale No Valores posibles: \"AR\" o \"US\" (pendientes nuevos valores). Representan qu\u00e9 _locale_ usar para formatear n\u00fameros, es decir, separadores de miles o de decimales. string AR AR o US zoom No Indica si tiene habilitada la funcionalidad de zoom boolean Din\u00e1mico true / false exportable No Indica si tiene habilitada la funcionalidad de exportar el gr\u00e1fico boolean Din\u00e1mico true / false colors No Colores en formato hexadecimal. Ej: \"#000000\" list [\"#2E7D33\", \"#C62828\", \"#F9A822\", \"#6A1B99\", \"#EC407A\", \"#C2185B\", \"#6A1B99\", \"#039BE5\", \"#6EA100\", \"#0072BB\"] [\"#2E7D33\", \"#C62828\", \"#F9A822\"] backgroundColor No Color de fondo del gr\u00e1fico en formato hexadecimal string #cdcdcd #cdcdcd datePickerEnabled No Indica si el selector de fechas est\u00e1 habilitado boolean Din\u00e1mica true / false legendField No Indica el campo de la serie a usar para mostrar la leyenda string 'title' \"title\", \"description\" o \"id\" chartTypes No Especifica el tipo de gr\u00e1fico a usar para cada serie object 'line' para todas las series {'tmi_arg': 'column', 'tmi_02': 'line', 'tmi_06': 'area'} title No Especifica el t\u00edtulo el gr\u00e1fico string Ninguno Tasa de Mortalidad Infantil de Argentina source No Especifica el texto al pie del gr\u00e1fico string Ninguno Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud displayUnits No Indica si se muestran las unidades del gr\u00e1fico boolean Din\u00e1mico true / false legendLabel No Especifica el texto a mostrar como leyenda por cada serie object {} {'serie01': 'leyenda custom'} seriesAxis No Especifica de qu\u00e9 lado del gr\u00e1fico mostrar las ordenadas y unidades de cada serie representada. Puede haber m\u00e1s de una serie en un mismo lado. Si hay una sola serie, debe ir obligatoriamente del lado izquierdo object {} {'serie01': 'right', 'serie02': 'left'} chartType No Especifica un tipo de gr\u00e1fico para aplicar a todas las series como default. En caso de estar especificado un tipo para una serie en chartTypes, este \u00faltimo ser\u00e1 priorizado para la misma string 'line' 'line', 'area' o 'column'","title":"Tabla de par\u00e1metros"},{"location":"reference/ts-components/graphic/#asignacion-dinamica-de-atributos","text":"Varios componentes del gr\u00e1fico se muestran/ocultan din\u00e1micamente dependiendo de su tama\u00f1o. Los componentes son din\u00e1micos, en tanto no se especifique su valor de inicializaci\u00f3n: Si un par\u00e1metro se especifica con valor true se muestra siempre. Si el par\u00e1metro es false no se muestra nunca. Si no se especifica, corren las siguientes reglas: zoom : Se muestra si el ancho es mayor o igual a 620px navigator : Se muestra si el ancho es mayor o igual a 500px datePickerEnabled : Se muestra si el ancho es mayor o igual a 400px displayUnits : Se muestra si el ancho es mayor o igual a 450px leyenda : Este no es un campo que se pueda ocultar mediante la API de TSComponents.Graphic , pero los valores de la leyenda se muestran s\u00f3lo si hay m\u00e1s de una serie aplicada.","title":"Asignaci\u00f3n din\u00e1mica de atributos"},{"location":"reference/ts-components/graphic/#ejemplo-completo","text":"< html > < body > < script type = 'text/javascript' src = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/js/components.js' ></ script > < link rel = 'stylesheet' type = 'text/css' href = 'https://cdn.jsdelivr.net/gh/datosgobar/series-tiempo-ar-explorer@ts_components_2.2.0/dist/css/components.css' /> < div id = \"root\" ></ div > < script > window . onload = function () { TSComponents . Graphic . render ( 'root' , { graphicUrl : 'https://apis.datos.gob.ar/series/api/series/?ids=tmi_arg' , title : 'Tasa de Mortalidad Infantil de Argentina' , source : 'Direcci\u00f3n de Estad\u00edstica e Informaci\u00f3n en Salud (DEIS). Secretar\u00eda de Gobierno de Salud' , legendField : 'title' , chartType : 'area' , chartTypes : { 'tmi_arg' : 'column' }, zoom : true , datePickerEnabled : true , displayUnits : true exportable : true , navigator : false , backgroundColor : '#cdcdcd' , colors : [ '#cecece' , '#8d6b22' , '#62848d' ], locale : 'AR' , chartOptions : {}, legendLabel : { 'tmi_arg' : 'Tasa de mortalidad nacional' }, seriesAxis : { 'tmi_arg' : 'left' } }) } </ script > </ body > </ html >","title":"Ejemplo completo"}]}